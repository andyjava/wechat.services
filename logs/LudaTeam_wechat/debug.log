2017-09-30 15:14:14.191 [] [] [] INFO [main] <Run.java [45] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:14:14.210 [] [] [] INFO [main] <Run.java [52] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:14:14.214 [] [] [] INFO [main] <Run.java [55] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:14:14.215 [] [] [] INFO [main] <Run.java [58] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:14:14.696 [] [] [] INFO [main] <Run.java [67] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:14:14.816 [] [] [] INFO [main] <Run.java [79] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:14:14.817 [] [] [] INFO [main] <Run.java [89] - <clinit>> <configPlugin 使用数据库类型是 oracle> 
2017-09-30 15:14:14.818 [] [] [] INFO [main] <Run.java [103] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:14:14.968 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:14:14.969 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:14:14.970 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:14:14.971 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:14:14.971 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:14:14.972 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:14:14.973 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:14:14.973 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:14:14.976 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:14:14.976 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:14:14.977 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:14:14.978 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:14:14.978 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:14:14.979 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:14:14.979 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:14:14.984 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:14:14.985 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:14:14.986 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:14:14.989 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:14:14.990 [] [] [] INFO [main] <Run.java [106] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:14:15.071 [] [] [] INFO [main] <Run.java [109] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:14:37.532 [] [] [] ERROR [main] <DruidDataSource.java [688] - init> <init datasource error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:988)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:984)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:103)
	at com.jfinal.plugin.activerecord.TableBuilder.build(TableBuilder.java:38)
	at com.jfinal.plugin.activerecord.ActiveRecordPlugin.start(ActiveRecordPlugin.java:209)
	at com.ludateam.wechat.Run.<clinit>(Run.java:110)
2017-09-30 15:14:37.602 [] [] [] ERROR [main] <DruidDataSource.java [706] - init> <{dataSource-1} init error> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:988)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:984)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:103)
	at com.jfinal.plugin.activerecord.TableBuilder.build(TableBuilder.java:38)
	at com.jfinal.plugin.activerecord.ActiveRecordPlugin.start(ActiveRecordPlugin.java:209)
	at com.ludateam.wechat.Run.<clinit>(Run.java:110)
2017-09-30 15:14:58.704 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:15:19.709 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:15:40.711 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:16:01.711 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:16:22.720 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:16:43.739 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:17:04.757 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:17:25.795 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:17:45.292 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:17:45.305 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:17:45.309 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:17:45.310 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:17:45.394 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:17:45.459 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:17:45.460 [] [] [] INFO [main] <Run.java [97] - <clinit>> <configPlugin 使用数据库类型是 oracle> 
2017-09-30 15:17:45.461 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:17:45.685 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:17:45.686 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:17:45.686 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:17:45.687 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:17:45.687 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:17:45.688 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:17:45.688 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:17:45.689 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:17:45.691 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:17:45.692 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:17:45.693 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:17:45.693 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:17:45.694 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:17:45.694 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:17:45.695 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:17:45.696 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:17:45.697 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:17:45.697 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:17:45.698 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:17:45.698 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:17:45.729 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:17:46.810 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:17:56.471 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:17:56.485 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:17:56.489 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:17:56.490 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:17:56.565 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:17:56.657 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:17:56.658 [] [] [] INFO [main] <Run.java [97] - <clinit>> <configPlugin 使用数据库类型是 oracle> 
2017-09-30 15:17:56.659 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:17:56.864 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:17:56.865 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:17:56.865 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:17:56.866 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:17:56.867 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:17:56.868 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:17:56.868 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:17:56.869 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:17:56.872 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:17:56.872 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:17:56.873 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:17:56.874 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:17:56.874 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:17:56.875 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:17:56.875 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:17:56.877 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:17:56.878 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:17:56.878 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:17:56.879 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:17:56.883 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:17:56.923 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:18:05.195 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:18:05.207 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:18:05.211 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:18:05.211 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:18:05.298 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:18:05.353 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:18:05.354 [] [] [] INFO [main] <Run.java [97] - <clinit>> <configPlugin 使用数据库类型是 oracle> 
2017-09-30 15:18:05.355 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:18:05.467 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:18:05.468 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:18:05.468 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:18:05.469 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:18:05.470 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:18:05.471 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:18:05.471 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:18:05.472 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:18:05.475 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:18:05.476 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:18:05.476 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:18:05.477 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:18:05.478 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:18:05.478 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:18:05.479 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:18:05.481 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:18:05.482 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:18:05.483 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:18:05.484 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:18:05.486 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:18:05.524 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:18:08.002 [] [] [] ERROR [main] <DruidDataSource.java [688] - init> <init datasource error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:988)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:984)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:103)
	at com.jfinal.plugin.activerecord.TableBuilder.build(TableBuilder.java:38)
	at com.jfinal.plugin.activerecord.ActiveRecordPlugin.start(ActiveRecordPlugin.java:209)
	at com.ludateam.wechat.Run.<clinit>(Run.java:118)
2017-09-30 15:18:08.065 [] [] [] ERROR [main] <DruidDataSource.java [706] - init> <{dataSource-1} init error> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:988)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:984)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:103)
	at com.jfinal.plugin.activerecord.TableBuilder.build(TableBuilder.java:38)
	at com.jfinal.plugin.activerecord.ActiveRecordPlugin.start(ActiveRecordPlugin.java:209)
	at com.ludateam.wechat.Run.<clinit>(Run.java:118)
2017-09-30 15:18:27.058 [] [] [] ERROR [main] <DruidDataSource.java [688] - init> <init datasource error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:988)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:984)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:103)
	at com.jfinal.plugin.activerecord.TableBuilder.build(TableBuilder.java:38)
	at com.jfinal.plugin.activerecord.ActiveRecordPlugin.start(ActiveRecordPlugin.java:209)
	at com.ludateam.wechat.Run.<clinit>(Run.java:118)
2017-09-30 15:18:27.102 [] [] [] ERROR [main] <DruidDataSource.java [706] - init> <{dataSource-1} init error> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:988)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:984)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:103)
	at com.jfinal.plugin.activerecord.TableBuilder.build(TableBuilder.java:38)
	at com.jfinal.plugin.activerecord.ActiveRecordPlugin.start(ActiveRecordPlugin.java:209)
	at com.ludateam.wechat.Run.<clinit>(Run.java:118)
2017-09-30 15:18:29.081 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:18:48.111 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:18:50.222 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:19:09.118 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:19:11.228 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:19:20.297 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:19:20.310 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:19:20.314 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:19:20.315 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:19:20.396 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:19:20.458 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:19:20.458 [] [] [] INFO [main] <Run.java [93] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:19:20.459 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:19:20.600 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:19:20.601 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:19:20.602 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:19:20.602 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:19:20.603 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:19:20.603 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:19:20.604 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:19:20.604 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:19:20.608 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:19:20.609 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:19:20.609 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:19:20.610 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:19:20.610 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:19:20.611 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:19:20.611 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:19:20.613 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:19:20.614 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:19:20.614 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:19:20.615 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:19:20.615 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:19:20.646 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:19:20.837 [] [] [] ERROR [main] <DruidDataSource.java [706] - init> <{dataSource-1} init error> 
java.sql.SQLException: com.mysql.jdbc.Driver
	at com.alibaba.druid.util.JdbcUtils.createDriver(JdbcUtils.java:566)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:642)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:988)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:984)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:103)
	at com.jfinal.plugin.activerecord.TableBuilder.build(TableBuilder.java:38)
	at com.jfinal.plugin.activerecord.ActiveRecordPlugin.start(ActiveRecordPlugin.java:209)
	at com.ludateam.wechat.Run.<clinit>(Run.java:118)
Caused by: java.lang.ClassNotFoundException: com.mysql.jdbc.Driver
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:264)
	at com.alibaba.druid.util.JdbcUtils.createDriver(JdbcUtils.java:564)
	... 7 more
2017-09-30 15:19:32.301 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:19:53.362 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:20:14.363 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:20:35.369 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:20:56.418 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:21:12.177 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:21:12.219 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:21:12.224 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:21:12.225 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:21:12.389 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:21:12.510 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:21:12.511 [] [] [] INFO [main] <Run.java [93] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:21:12.512 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:21:12.677 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:21:12.678 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:21:12.679 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:21:12.680 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:21:12.681 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:21:12.682 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:21:12.682 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:21:12.683 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:21:12.686 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:21:12.687 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:21:12.687 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:21:12.688 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:21:12.689 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:21:12.689 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:21:12.690 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:21:12.692 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:21:12.693 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:21:12.694 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:21:12.695 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:21:12.696 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:21:12.731 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:21:17.567 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:21:20.957 [] [] [] ERROR [main] <DruidDataSource.java [688] - init> <init datasource error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:988)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:984)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:103)
	at com.jfinal.plugin.activerecord.TableBuilder.build(TableBuilder.java:38)
	at com.jfinal.plugin.activerecord.ActiveRecordPlugin.start(ActiveRecordPlugin.java:209)
	at com.ludateam.wechat.Run.<clinit>(Run.java:118)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 24 more
2017-09-30 15:21:20.981 [] [] [] ERROR [main] <DruidDataSource.java [706] - init> <{dataSource-1} init error> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource.init(DruidDataSource.java:677)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:988)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:984)
	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:103)
	at com.jfinal.plugin.activerecord.TableBuilder.build(TableBuilder.java:38)
	at com.jfinal.plugin.activerecord.ActiveRecordPlugin.start(ActiveRecordPlugin.java:209)
	at com.ludateam.wechat.Run.<clinit>(Run.java:118)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 24 more
2017-09-30 15:21:25.023 [] [] [] ERROR [Druid-ConnectionPool-Create-2028555727] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull, errorCode 0, state 08001> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 18 more
2017-09-30 15:21:29.049 [] [] [] ERROR [Druid-ConnectionPool-Create-2028555727] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull, errorCode 0, state 08001> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 18 more
2017-09-30 15:21:33.072 [] [] [] ERROR [Druid-ConnectionPool-Create-2028555727] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull, errorCode 0, state 08001> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 18 more
2017-09-30 15:21:37.107 [] [] [] ERROR [Druid-ConnectionPool-Create-2028555727] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull, errorCode 0, state 08001> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 18 more
2017-09-30 15:21:38.658 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:21:41.129 [] [] [] ERROR [Druid-ConnectionPool-Create-2028555727] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull, errorCode 0, state 08001> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 18 more
2017-09-30 15:21:45.151 [] [] [] ERROR [Druid-ConnectionPool-Create-2028555727] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull, errorCode 0, state 08001> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 18 more
2017-09-30 15:21:49.179 [] [] [] ERROR [Druid-ConnectionPool-Create-2028555727] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull, errorCode 0, state 08001> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 18 more
2017-09-30 15:21:53.206 [] [] [] ERROR [Druid-ConnectionPool-Create-2028555727] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull, errorCode 0, state 08001> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 18 more
2017-09-30 15:21:57.246 [] [] [] ERROR [Druid-ConnectionPool-Create-2028555727] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:mysql://127.0.0.1:3306/jfinaluibv4?characterEncoding=UTF-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull, errorCode 0, state 08001> 
com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Could not create connection to database server. Attempted reconnect 3 times. Giving up.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.Util.getInstance(Util.java:387)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:917)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:896)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:885)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:860)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2165)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2090)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:795)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:44)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:400)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:327)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
Caused by: java.sql.SQLException: Access denied for user 'root'@'localhost' (using password: YES)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:957)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3878)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3814)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:871)
	at com.mysql.jdbc.MysqlIO.proceedHandshakeWithPluggableAuthentication(MysqlIO.java:1694)
	at com.mysql.jdbc.MysqlIO.doHandshake(MysqlIO.java:1215)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2255)
	at com.mysql.jdbc.ConnectionImpl.connectWithRetries(ConnectionImpl.java:2106)
	... 18 more
2017-09-30 15:21:59.728 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:22:20.796 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:22:41.881 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:23:02.962 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:23:19.432 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:23:19.444 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:23:19.449 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:23:19.450 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:23:19.528 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:23:19.628 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:23:19.629 [] [] [] INFO [main] <Run.java [93] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:23:19.629 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:23:19.766 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:23:19.767 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:23:19.768 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:23:19.769 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:23:19.769 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:23:19.770 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:23:19.771 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:23:19.771 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:23:19.774 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:23:19.775 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:23:19.775 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:23:19.776 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:23:19.776 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:23:19.777 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:23:19.778 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:23:19.779 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:23:19.780 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:23:19.781 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:23:19.781 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:23:19.782 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:23:19.815 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:23:23.964 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:23:30.030 [] [] [] INFO [main] <Run.java [121] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-09-30 15:23:30.042 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-09-30 15:23:30.043 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-09-30 15:23:30.044 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-09-30 15:23:30.044 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-09-30 15:23:30.044 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-09-30 15:23:30.045 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-09-30 15:23:30.046 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-09-30 15:23:30.046 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-09-30 15:23:30.047 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-09-30 15:23:30.047 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-09-30 15:23:30.048 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-09-30 15:23:30.048 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-09-30 15:23:30.048 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-09-30 15:23:30.049 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-09-30 15:23:30.049 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-09-30 15:23:30.050 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-09-30 15:23:30.051 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-09-30 15:23:30.051 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-09-30 15:23:30.052 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-09-30 15:23:30.052 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-09-30 15:23:30.053 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-09-30 15:23:30.053 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-09-30 15:23:30.054 [] [] [] INFO [main] <Run.java [124] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-09-30 15:23:30.058 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_CN.properties> 
2017-09-30 15:23:30.059 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_CN.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_CN.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:23:30.061 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_HK.properties> 
2017-09-30 15:23:30.062 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_HK.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_HK.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:23:30.063 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_TW.properties> 
2017-09-30 15:23:30.063 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_TW.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_TW.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:23:30.064 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_en_US.properties> 
2017-09-30 15:23:30.065 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_en_US.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_en_US.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:23:30.066 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_ja.properties> 
2017-09-30 15:23:30.066 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_ja.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_ja.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:23:30.068 [] [] [] INFO [main] <Run.java [128] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-09-30 15:23:37.137 [] [] [] INFO [main] <Run.java [141] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-09-30 15:23:37.687 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-09-30 15:23:37.688 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-09-30 15:23:37.688 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-09-30 15:23:37.689 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-09-30 15:23:37.689 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-09-30 15:23:37.689 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-09-30 15:23:37.692 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-09-30 15:23:37.692 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-09-30 15:23:37.695 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-09-30 15:23:37.696 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-09-30 15:23:37.697 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-09-30 15:23:37.700 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-09-30 15:23:37.701 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-09-30 15:23:37.706 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-09-30 15:23:37.707 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-09-30 15:23:37.708 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-09-30 15:23:37.709 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-09-30 15:23:37.710 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-09-30 15:23:37.714 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-09-30 15:23:37.716 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-09-30 15:23:37.774 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-09-30 15:23:37.775 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-09-30 15:23:37.776 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-09-30 15:23:37.776 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-09-30 15:23:37.784 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-09-30 15:23:37.784 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-09-30 15:23:37.785 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-09-30 15:23:37.786 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-09-30 15:23:37.787 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-09-30 15:23:37.787 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:23:37.788 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-09-30 15:23:37.788 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-09-30 15:23:37.791 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:23:37.792 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:23:37.792 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-09-30 15:23:37.793 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:23:37.794 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-09-30 15:23:37.805 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:23:37.812 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:23:37.813 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-09-30 15:23:37.819 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-09-30 15:23:37.831 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-09-30 15:23:37.835 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-09-30 15:23:37.836 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-09-30 15:23:37.849 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-09-30 15:23:37.850 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:23:37.871 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:23:37.872 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-09-30 15:23:37.874 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:23:37.876 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-09-30 15:23:37.877 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-09-30 15:23:37.879 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-09-30 15:23:37.887 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-09-30 15:23:37.888 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-09-30 15:23:37.889 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-09-30 15:23:37.894 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-09-30 15:23:37.898 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-09-30 15:23:37.898 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:23:37.899 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:23:37.900 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-09-30 15:23:37.905 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-09-30 15:23:37.910 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:23:37.913 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:23:37.913 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:23:37.914 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-09-30 15:23:37.915 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-09-30 15:23:37.916 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-09-30 15:23:37.916 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-09-30 15:23:37.917 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-09-30 15:23:37.922 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-09-30 15:23:37.923 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-09-30 15:23:37.924 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-09-30 15:23:37.924 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-09-30 15:23:37.925 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-09-30 15:23:37.931 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:23:37.933 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-09-30 15:23:37.934 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-09-30 15:23:37.937 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:23:37.938 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:23:37.939 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-09-30 15:23:37.939 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:23:37.940 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-09-30 15:23:37.951 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-09-30 15:23:37.951 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-09-30 15:23:37.962 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-09-30 15:23:37.972 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-09-30 15:23:37.972 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-09-30 15:23:37.973 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:23:37.973 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-09-30 15:23:37.973 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-09-30 15:23:37.980 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:23:37.981 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:23:37.981 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-09-30 15:23:37.982 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:23:37.982 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:23:37.982 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-09-30 15:23:37.983 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-09-30 15:23:37.983 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-09-30 15:23:37.986 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:23:37.987 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-09-30 15:23:37.988 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-09-30 15:23:37.988 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-09-30 15:23:37.997 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:23:37.998 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:23:37.998 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-09-30 15:23:37.998 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:23:37.999 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-09-30 15:23:37.999 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-09-30 15:23:38.002 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-09-30 15:23:38.003 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-09-30 15:23:38.003 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-09-30 15:23:38.004 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-09-30 15:23:38.004 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-09-30 15:23:38.009 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-09-30 15:23:38.009 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-09-30 15:23:38.012 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-09-30 15:23:38.015 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-09-30 15:23:38.015 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-09-30 15:23:38.019 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:23:38.019 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-09-30 15:23:38.020 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-09-30 15:23:38.020 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-09-30 15:23:38.021 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-09-30 15:23:38.021 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-09-30 15:23:38.022 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-09-30 15:23:38.041 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:23:38.046 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-09-30 15:23:38.047 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-09-30 15:23:38.047 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-09-30 15:23:38.048 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-09-30 15:23:38.048 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-09-30 15:23:38.048 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-09-30 15:23:38.049 [] [] [] INFO [main] <Run.java [144] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-09-30 15:23:38.053 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-09-30 15:23:38.054 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-09-30 15:23:38.144 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:23:39.115 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-09-30 15:23:39.194 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:23:39.425 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
     >>03:23:38:变量未定义(VAR_NOT_DEFINED):db_type 位于1行 资源: <% if(db_...
1| <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %>  
 > 
2017-09-30 15:23:44.963 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:24:05.966 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:24:26.996 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:24:47.997 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:24:53.605 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:24:53.617 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:24:53.621 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:24:53.622 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:24:53.696 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:24:53.757 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:24:53.758 [] [] [] INFO [main] <Run.java [93] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:24:53.759 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:24:53.871 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:24:53.872 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:24:53.874 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:24:53.875 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:24:53.875 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:24:53.876 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:24:53.876 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:24:53.877 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:24:53.880 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:24:53.881 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:24:53.882 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:24:53.882 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:24:53.882 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:24:53.883 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:24:53.883 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:24:53.885 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:24:53.885 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:24:53.887 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:24:53.888 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:24:53.888 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:24:53.962 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:24:58.689 [] [] [] INFO [main] <Run.java [121] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-09-30 15:24:58.705 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-09-30 15:24:58.706 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-09-30 15:24:58.707 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-09-30 15:24:58.708 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-09-30 15:24:58.709 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-09-30 15:24:58.710 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-09-30 15:24:58.712 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-09-30 15:24:58.713 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-09-30 15:24:58.714 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-09-30 15:24:58.715 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-09-30 15:24:58.716 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-09-30 15:24:58.718 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-09-30 15:24:58.719 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-09-30 15:24:58.720 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-09-30 15:24:58.721 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-09-30 15:24:58.723 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-09-30 15:24:58.724 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-09-30 15:24:58.724 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-09-30 15:24:58.726 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-09-30 15:24:58.727 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-09-30 15:24:58.728 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-09-30 15:24:58.729 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-09-30 15:24:58.729 [] [] [] INFO [main] <Run.java [124] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-09-30 15:24:58.736 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_CN.properties> 
2017-09-30 15:24:58.738 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_CN.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_CN.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:24:58.743 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_HK.properties> 
2017-09-30 15:24:58.744 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_HK.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_HK.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:24:58.745 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_TW.properties> 
2017-09-30 15:24:58.746 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_TW.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_zh_TW.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:24:58.747 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_en_US.properties> 
2017-09-30 15:24:58.747 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_en_US.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_en_US.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:24:58.749 [] [] [] DEBUG [main] <I18NPlugin.java [132] - start> <加载国际化资源文件：E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_ja.properties> 
2017-09-30 15:24:58.749 [] [] [] ERROR [main] <I18NPlugin.java [147] - start> <加载properties失败！...E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_ja.properties (系统找不到指定的路径。)> 
java.io.FileNotFoundException: E:\XUHUI\wechat.services\wechat.service\WEB-INF\classes\message_ja.properties (系统找不到指定的路径。)
	at java.io.FileInputStream.open0(Native Method)
	at java.io.FileInputStream.open(FileInputStream.java:195)
	at java.io.FileInputStream.<init>(FileInputStream.java:138)
	at com.platform.plugin.I18NPlugin.start(I18NPlugin.java:133)
	at com.ludateam.wechat.Run.<clinit>(Run.java:125)
2017-09-30 15:24:58.751 [] [] [] INFO [main] <Run.java [128] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-09-30 15:25:00.002 [] [] [] INFO [main] <Run.java [141] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-09-30 15:25:00.254 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-09-30 15:25:00.255 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-09-30 15:25:00.256 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-09-30 15:25:00.257 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-09-30 15:25:00.257 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-09-30 15:25:00.258 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-09-30 15:25:00.263 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-09-30 15:25:00.264 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-09-30 15:25:00.269 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-09-30 15:25:00.270 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-09-30 15:25:00.271 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-09-30 15:25:00.275 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-09-30 15:25:00.276 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-09-30 15:25:00.280 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-09-30 15:25:00.281 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-09-30 15:25:00.284 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-09-30 15:25:00.285 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-09-30 15:25:00.286 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-09-30 15:25:00.291 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-09-30 15:25:00.292 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-09-30 15:25:00.298 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-09-30 15:25:00.299 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-09-30 15:25:00.299 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-09-30 15:25:00.300 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-09-30 15:25:00.307 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-09-30 15:25:00.307 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-09-30 15:25:00.308 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-09-30 15:25:00.309 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-09-30 15:25:00.309 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-09-30 15:25:00.310 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:25:00.311 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-09-30 15:25:00.311 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-09-30 15:25:00.312 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:25:00.313 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:25:00.313 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-09-30 15:25:00.314 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:25:00.315 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-09-30 15:25:00.319 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:25:00.320 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:25:00.320 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-09-30 15:25:00.325 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-09-30 15:25:00.325 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-09-30 15:25:00.326 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-09-30 15:25:00.327 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-09-30 15:25:00.327 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-09-30 15:25:00.328 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:25:00.333 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:25:00.334 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-09-30 15:25:00.335 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:25:00.335 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-09-30 15:25:00.336 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-09-30 15:25:00.336 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-09-30 15:25:00.337 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-09-30 15:25:00.337 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-09-30 15:25:00.340 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-09-30 15:25:00.340 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-09-30 15:25:00.346 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-09-30 15:25:00.346 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:25:00.347 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:25:00.348 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-09-30 15:25:00.348 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-09-30 15:25:00.353 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:25:00.354 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:25:00.355 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:25:00.356 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-09-30 15:25:00.359 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-09-30 15:25:00.360 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-09-30 15:25:00.361 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-09-30 15:25:00.361 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-09-30 15:25:00.367 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-09-30 15:25:00.367 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-09-30 15:25:00.368 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-09-30 15:25:00.368 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-09-30 15:25:00.369 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-09-30 15:25:00.370 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:25:00.371 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-09-30 15:25:00.371 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-09-30 15:25:00.372 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:25:00.373 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:25:00.373 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-09-30 15:25:00.374 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:25:00.374 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-09-30 15:25:00.383 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-09-30 15:25:00.384 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-09-30 15:25:00.388 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-09-30 15:25:00.389 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-09-30 15:25:00.390 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-09-30 15:25:00.390 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:25:00.391 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-09-30 15:25:00.392 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-09-30 15:25:00.398 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:25:00.398 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:25:00.399 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-09-30 15:25:00.400 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:25:00.400 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:25:00.401 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-09-30 15:25:00.402 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-09-30 15:25:00.402 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-09-30 15:25:00.406 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:25:00.407 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-09-30 15:25:00.407 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-09-30 15:25:00.412 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-09-30 15:25:00.418 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:25:00.419 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:25:00.420 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-09-30 15:25:00.421 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:25:00.421 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-09-30 15:25:00.422 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-09-30 15:25:00.427 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-09-30 15:25:00.428 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-09-30 15:25:00.429 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-09-30 15:25:00.430 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-09-30 15:25:00.431 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-09-30 15:25:00.435 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-09-30 15:25:00.436 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-09-30 15:25:00.439 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-09-30 15:25:00.443 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-09-30 15:25:00.444 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-09-30 15:25:00.449 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:25:00.450 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-09-30 15:25:00.450 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-09-30 15:25:00.452 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-09-30 15:25:00.452 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-09-30 15:25:00.453 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-09-30 15:25:00.454 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-09-30 15:25:00.460 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:25:00.464 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-09-30 15:25:00.464 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-09-30 15:25:00.465 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-09-30 15:25:00.465 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-09-30 15:25:00.466 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-09-30 15:25:00.466 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-09-30 15:25:00.468 [] [] [] INFO [main] <Run.java [144] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-09-30 15:25:00.469 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-09-30 15:25:00.470 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-09-30 15:25:00.473 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:25:01.106 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-09-30 15:25:01.140 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:25:01.155 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
     >>03:25:00:变量未定义(VAR_NOT_DEFINED):db_type 位于1行 资源: <% if(db_...
1| <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %>  
 > 
2017-09-30 15:25:09.018 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:25:30.022 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:25:51.067 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:25:55.246 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:25:55.268 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:25:55.272 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:25:55.273 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:25:55.344 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:25:55.407 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:25:55.407 [] [] [] INFO [main] <Run.java [93] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:25:55.408 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:25:55.549 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:25:55.550 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:25:55.551 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:25:55.552 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:25:55.552 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:25:55.553 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:25:55.553 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:25:55.553 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:25:55.556 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:25:55.557 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:25:55.557 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:25:55.557 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:25:55.558 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:25:55.558 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:25:55.559 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:25:55.560 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:25:55.561 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:25:55.561 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:25:55.561 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:25:55.562 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:25:55.616 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:25:58.656 [] [] [] INFO [main] <Run.java [121] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-09-30 15:25:58.672 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-09-30 15:25:58.676 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-09-30 15:25:58.676 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-09-30 15:25:58.677 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-09-30 15:25:58.678 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-09-30 15:25:58.679 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-09-30 15:25:58.680 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-09-30 15:25:58.681 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-09-30 15:25:58.682 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-09-30 15:25:58.683 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-09-30 15:25:58.683 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-09-30 15:25:58.685 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-09-30 15:25:58.686 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-09-30 15:25:58.687 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-09-30 15:25:58.690 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-09-30 15:25:58.692 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-09-30 15:25:58.692 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-09-30 15:25:58.693 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-09-30 15:25:58.694 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-09-30 15:25:58.695 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-09-30 15:25:58.695 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-09-30 15:25:58.701 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-09-30 15:25:58.707 [] [] [] INFO [main] <Run.java [124] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-09-30 15:25:58.709 [] [] [] INFO [main] <Run.java [128] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-09-30 15:26:00.131 [] [] [] INFO [main] <Run.java [141] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-09-30 15:26:00.240 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-09-30 15:26:00.241 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-09-30 15:26:00.242 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-09-30 15:26:00.242 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-09-30 15:26:00.243 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-09-30 15:26:00.244 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-09-30 15:26:00.247 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-09-30 15:26:00.248 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-09-30 15:26:00.259 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-09-30 15:26:00.274 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-09-30 15:26:00.275 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-09-30 15:26:00.279 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-09-30 15:26:00.280 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-09-30 15:26:00.284 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-09-30 15:26:00.285 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-09-30 15:26:00.285 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-09-30 15:26:00.286 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-09-30 15:26:00.287 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-09-30 15:26:00.290 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-09-30 15:26:00.296 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-09-30 15:26:00.300 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-09-30 15:26:00.300 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-09-30 15:26:00.301 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-09-30 15:26:00.301 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-09-30 15:26:00.307 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-09-30 15:26:00.308 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-09-30 15:26:00.308 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-09-30 15:26:00.311 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-09-30 15:26:00.311 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-09-30 15:26:00.312 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:26:00.312 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-09-30 15:26:00.313 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-09-30 15:26:00.313 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:26:00.314 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:26:00.314 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-09-30 15:26:00.315 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:26:00.315 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-09-30 15:26:00.319 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:26:00.320 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:26:00.325 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-09-30 15:26:00.329 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-09-30 15:26:00.330 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-09-30 15:26:00.330 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-09-30 15:26:00.331 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-09-30 15:26:00.331 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-09-30 15:26:00.332 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:26:00.337 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:26:00.338 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-09-30 15:26:00.338 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:26:00.339 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-09-30 15:26:00.342 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-09-30 15:26:00.343 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-09-30 15:26:00.343 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-09-30 15:26:00.344 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-09-30 15:26:00.345 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-09-30 15:26:00.345 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-09-30 15:26:00.350 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-09-30 15:26:00.376 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:26:00.379 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:26:00.381 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-09-30 15:26:00.382 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-09-30 15:26:00.397 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:26:00.399 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:26:00.401 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:26:00.403 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-09-30 15:26:00.407 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-09-30 15:26:00.409 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-09-30 15:26:00.413 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-09-30 15:26:00.414 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-09-30 15:26:00.436 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-09-30 15:26:00.446 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-09-30 15:26:00.448 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-09-30 15:26:00.449 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-09-30 15:26:00.454 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-09-30 15:26:00.458 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:26:00.460 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-09-30 15:26:00.461 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-09-30 15:26:00.461 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:26:00.462 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:26:00.463 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-09-30 15:26:00.465 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:26:00.466 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-09-30 15:26:00.476 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-09-30 15:26:00.479 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-09-30 15:26:00.490 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-09-30 15:26:00.492 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-09-30 15:26:00.493 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-09-30 15:26:00.494 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:26:00.495 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-09-30 15:26:00.495 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-09-30 15:26:00.499 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:26:00.500 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:26:00.501 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-09-30 15:26:00.501 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:26:00.502 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:26:00.503 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-09-30 15:26:00.504 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-09-30 15:26:00.504 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-09-30 15:26:00.507 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:26:00.508 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-09-30 15:26:00.509 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-09-30 15:26:00.509 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-09-30 15:26:00.512 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:26:00.513 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:26:00.514 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-09-30 15:26:00.514 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:26:00.515 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-09-30 15:26:00.516 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-09-30 15:26:00.520 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-09-30 15:26:00.521 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-09-30 15:26:00.522 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-09-30 15:26:00.522 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-09-30 15:26:00.523 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-09-30 15:26:00.525 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-09-30 15:26:00.526 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-09-30 15:26:00.529 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-09-30 15:26:00.532 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-09-30 15:26:00.533 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-09-30 15:26:00.537 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:26:00.537 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-09-30 15:26:00.538 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-09-30 15:26:00.538 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-09-30 15:26:00.539 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-09-30 15:26:00.539 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-09-30 15:26:00.539 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-09-30 15:26:00.542 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:26:00.545 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-09-30 15:26:00.547 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-09-30 15:26:00.548 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-09-30 15:26:00.548 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-09-30 15:26:00.549 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-09-30 15:26:00.550 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-09-30 15:26:00.551 [] [] [] INFO [main] <Run.java [144] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-09-30 15:26:00.558 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-09-30 15:26:00.559 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-09-30 15:26:00.566 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:26:01.053 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-09-30 15:26:01.222 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:26:01.237 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
     >>03:26:01:变量未定义(VAR_NOT_DEFINED):db_type 位于1行 资源: <% if(db_...
1| <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %>  
 > 
2017-09-30 15:26:12.083 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:26:33.083 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:26:54.084 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:27:15.114 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:27:36.114 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:27:57.111 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:28:09.009 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:28:09.022 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:28:09.025 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:28:09.026 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:28:09.090 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:28:09.163 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:28:09.164 [] [] [] INFO [main] <Run.java [93] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:28:09.164 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:28:09.277 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:28:09.278 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:28:09.278 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:28:09.279 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:28:09.280 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:28:09.280 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:28:09.281 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:28:09.282 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:28:09.284 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:28:09.285 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:28:09.285 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:28:09.286 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:28:09.286 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:28:09.287 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:28:09.287 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:28:09.289 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:28:09.290 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:28:09.290 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:28:09.291 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:28:09.291 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:28:09.326 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:28:13.246 [] [] [] INFO [main] <Run.java [121] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-09-30 15:28:13.268 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-09-30 15:28:13.269 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-09-30 15:28:13.269 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-09-30 15:28:13.270 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-09-30 15:28:13.271 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-09-30 15:28:13.271 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-09-30 15:28:13.273 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-09-30 15:28:13.274 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-09-30 15:28:13.274 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-09-30 15:28:13.275 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-09-30 15:28:13.276 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-09-30 15:28:13.277 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-09-30 15:28:13.278 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-09-30 15:28:13.278 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-09-30 15:28:13.279 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-09-30 15:28:13.280 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-09-30 15:28:13.283 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-09-30 15:28:13.284 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-09-30 15:28:13.285 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-09-30 15:28:13.285 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-09-30 15:28:13.286 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-09-30 15:28:13.287 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-09-30 15:28:13.288 [] [] [] INFO [main] <Run.java [124] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-09-30 15:28:13.290 [] [] [] INFO [main] <Run.java [128] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-09-30 15:28:14.520 [] [] [] INFO [main] <Run.java [141] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-09-30 15:28:14.651 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-09-30 15:28:14.653 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-09-30 15:28:14.653 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-09-30 15:28:14.654 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-09-30 15:28:14.655 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-09-30 15:28:14.656 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-09-30 15:28:14.660 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-09-30 15:28:14.661 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-09-30 15:28:14.665 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-09-30 15:28:14.671 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-09-30 15:28:14.672 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-09-30 15:28:14.676 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-09-30 15:28:14.677 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-09-30 15:28:14.681 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-09-30 15:28:14.682 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-09-30 15:28:14.683 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-09-30 15:28:14.685 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-09-30 15:28:14.686 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-09-30 15:28:14.690 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-09-30 15:28:14.691 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-09-30 15:28:14.697 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-09-30 15:28:14.698 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-09-30 15:28:14.699 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-09-30 15:28:14.699 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-09-30 15:28:14.705 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-09-30 15:28:14.706 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-09-30 15:28:14.707 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-09-30 15:28:14.708 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-09-30 15:28:14.708 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-09-30 15:28:14.709 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:28:14.710 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-09-30 15:28:14.710 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-09-30 15:28:14.711 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:28:14.712 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:28:14.712 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-09-30 15:28:14.713 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:28:14.714 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-09-30 15:28:14.718 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:28:14.719 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:28:14.719 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-09-30 15:28:14.725 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-09-30 15:28:14.726 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-09-30 15:28:14.727 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-09-30 15:28:14.728 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-09-30 15:28:14.728 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-09-30 15:28:14.729 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:28:14.736 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:28:14.737 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-09-30 15:28:14.738 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:28:14.739 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-09-30 15:28:14.739 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-09-30 15:28:14.740 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-09-30 15:28:14.740 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-09-30 15:28:14.741 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-09-30 15:28:14.744 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-09-30 15:28:14.744 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-09-30 15:28:14.749 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-09-30 15:28:14.750 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:28:14.750 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:28:14.751 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-09-30 15:28:14.752 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-09-30 15:28:14.756 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:28:14.759 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:28:14.760 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:28:14.761 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-09-30 15:28:14.774 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-09-30 15:28:14.775 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-09-30 15:28:14.776 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-09-30 15:28:14.776 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-09-30 15:28:14.781 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-09-30 15:28:14.782 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-09-30 15:28:14.782 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-09-30 15:28:14.783 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-09-30 15:28:14.783 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-09-30 15:28:14.784 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:28:14.784 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-09-30 15:28:14.785 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-09-30 15:28:14.791 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:28:14.792 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:28:14.792 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-09-30 15:28:14.792 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:28:14.793 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-09-30 15:28:14.797 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-09-30 15:28:14.798 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-09-30 15:28:14.802 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-09-30 15:28:14.803 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-09-30 15:28:14.803 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-09-30 15:28:14.804 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:28:14.804 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-09-30 15:28:14.816 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-09-30 15:28:14.822 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:28:14.823 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:28:14.824 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-09-30 15:28:14.824 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:28:14.825 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:28:14.825 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-09-30 15:28:14.825 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-09-30 15:28:14.826 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-09-30 15:28:14.829 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:28:14.843 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-09-30 15:28:14.846 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-09-30 15:28:14.850 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-09-30 15:28:14.855 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:28:14.856 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:28:14.857 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-09-30 15:28:14.857 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:28:14.858 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-09-30 15:28:14.859 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-09-30 15:28:14.863 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-09-30 15:28:14.865 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-09-30 15:28:14.866 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-09-30 15:28:14.871 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-09-30 15:28:14.872 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-09-30 15:28:14.874 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-09-30 15:28:14.875 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-09-30 15:28:14.877 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-09-30 15:28:14.889 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-09-30 15:28:14.889 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-09-30 15:28:14.916 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:28:14.917 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-09-30 15:28:14.917 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-09-30 15:28:14.918 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-09-30 15:28:14.918 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-09-30 15:28:14.918 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-09-30 15:28:14.919 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-09-30 15:28:14.923 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:28:14.926 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-09-30 15:28:14.933 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-09-30 15:28:14.934 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-09-30 15:28:14.934 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-09-30 15:28:14.934 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-09-30 15:28:14.935 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-09-30 15:28:14.936 [] [] [] INFO [main] <Run.java [144] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-09-30 15:28:15.174 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-09-30 15:28:18.167 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:28:19.562 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-09-30 15:28:26.007 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:28:39.174 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:29:00.176 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:29:22.701 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:29:22.720 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:29:22.723 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:29:22.724 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:29:22.782 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:29:22.831 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:29:22.831 [] [] [] INFO [main] <Run.java [93] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:29:22.832 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:29:22.951 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:29:22.951 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:29:22.952 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:29:22.953 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:29:22.954 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:29:22.954 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:29:22.955 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:29:22.957 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:29:22.965 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:29:22.966 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:29:22.967 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:29:22.967 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:29:22.968 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:29:22.969 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:29:22.970 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:29:22.973 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:29:22.974 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:29:22.974 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:29:22.975 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:29:22.975 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:29:23.018 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:29:32.339 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-09-30 15:29:32.369 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:29:32.390 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
     >>03:28:27:变量未定义(VAR_NOT_DEFINED):db_type 位于1行 资源: <% if(db_...
1| <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %>  
 > 
2017-09-30 15:29:37.166 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:29:37.178 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:29:37.182 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:29:37.183 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:29:37.262 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:29:37.404 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:29:37.405 [] [] [] INFO [main] <Run.java [93] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:29:37.405 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:29:37.569 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:29:37.570 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:29:37.571 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:29:37.572 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:29:37.572 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:29:37.573 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:29:37.574 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:29:37.574 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:29:37.578 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:29:37.579 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:29:37.580 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:29:37.582 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:29:37.582 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:29:37.583 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:29:37.584 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:29:37.587 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:29:37.588 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:29:37.590 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:29:37.591 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:29:37.592 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:29:37.624 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:29:41.521 [] [] [] INFO [main] <Run.java [121] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-09-30 15:29:41.540 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-09-30 15:29:41.541 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-09-30 15:29:41.541 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-09-30 15:29:41.542 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-09-30 15:29:41.542 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-09-30 15:29:41.543 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-09-30 15:29:41.544 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-09-30 15:29:41.545 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-09-30 15:29:41.546 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-09-30 15:29:41.547 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-09-30 15:29:41.547 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-09-30 15:29:41.548 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-09-30 15:29:41.549 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-09-30 15:29:41.550 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-09-30 15:29:41.551 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-09-30 15:29:41.552 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-09-30 15:29:41.554 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-09-30 15:29:41.555 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-09-30 15:29:41.556 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-09-30 15:29:41.557 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-09-30 15:29:41.558 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-09-30 15:29:41.558 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-09-30 15:29:41.560 [] [] [] INFO [main] <Run.java [124] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-09-30 15:29:41.561 [] [] [] INFO [main] <Run.java [128] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-09-30 15:29:42.925 [] [] [] INFO [main] <Run.java [141] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-09-30 15:29:43.022 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-09-30 15:29:43.023 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-09-30 15:29:43.024 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-09-30 15:29:43.025 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-09-30 15:29:43.026 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-09-30 15:29:43.026 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-09-30 15:29:43.030 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-09-30 15:29:43.031 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-09-30 15:29:43.034 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-09-30 15:29:43.041 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-09-30 15:29:43.042 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-09-30 15:29:43.069 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-09-30 15:29:43.070 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-09-30 15:29:43.074 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-09-30 15:29:43.075 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-09-30 15:29:43.076 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-09-30 15:29:43.077 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-09-30 15:29:43.078 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-09-30 15:29:43.081 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-09-30 15:29:43.090 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-09-30 15:29:43.094 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-09-30 15:29:43.095 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-09-30 15:29:43.096 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-09-30 15:29:43.096 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-09-30 15:29:43.103 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-09-30 15:29:43.104 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-09-30 15:29:43.105 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-09-30 15:29:43.106 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-09-30 15:29:43.107 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-09-30 15:29:43.107 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:29:43.109 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-09-30 15:29:43.110 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-09-30 15:29:43.111 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:29:43.113 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:29:43.114 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-09-30 15:29:43.115 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:29:43.115 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-09-30 15:29:43.120 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:29:43.121 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:29:43.121 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-09-30 15:29:43.126 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-09-30 15:29:43.127 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-09-30 15:29:43.128 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-09-30 15:29:43.129 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-09-30 15:29:43.130 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-09-30 15:29:43.131 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:29:43.136 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:29:43.137 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-09-30 15:29:43.138 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:29:43.139 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-09-30 15:29:43.140 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-09-30 15:29:43.140 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-09-30 15:29:43.141 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-09-30 15:29:43.142 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-09-30 15:29:43.142 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-09-30 15:29:43.143 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-09-30 15:29:43.148 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-09-30 15:29:43.149 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:29:43.149 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:29:43.150 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-09-30 15:29:43.150 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-09-30 15:29:43.156 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:29:43.156 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:29:43.157 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:29:43.157 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-09-30 15:29:43.158 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-09-30 15:29:43.159 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-09-30 15:29:43.160 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-09-30 15:29:43.160 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-09-30 15:29:43.166 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-09-30 15:29:43.174 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-09-30 15:29:43.175 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-09-30 15:29:43.176 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-09-30 15:29:43.176 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-09-30 15:29:43.177 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:29:43.177 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-09-30 15:29:43.178 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-09-30 15:29:43.178 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:29:43.179 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:29:43.179 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-09-30 15:29:43.180 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:29:43.181 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-09-30 15:29:43.185 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-09-30 15:29:43.187 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-09-30 15:29:43.191 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-09-30 15:29:43.192 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-09-30 15:29:43.192 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-09-30 15:29:43.193 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:29:43.194 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-09-30 15:29:43.194 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-09-30 15:29:43.198 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:29:43.199 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:29:43.200 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-09-30 15:29:43.200 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:29:43.201 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:29:43.201 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-09-30 15:29:43.202 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-09-30 15:29:43.203 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-09-30 15:29:43.207 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:29:43.207 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-09-30 15:29:43.208 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-09-30 15:29:43.209 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-09-30 15:29:43.231 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:29:43.232 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:29:43.233 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-09-30 15:29:43.234 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:29:43.235 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-09-30 15:29:43.236 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-09-30 15:29:43.241 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-09-30 15:29:43.242 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-09-30 15:29:43.253 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-09-30 15:29:43.254 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-09-30 15:29:43.261 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-09-30 15:29:43.266 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-09-30 15:29:43.266 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-09-30 15:29:43.283 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-09-30 15:29:43.292 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-09-30 15:29:43.293 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-09-30 15:29:43.301 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:29:43.302 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-09-30 15:29:43.303 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-09-30 15:29:43.305 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-09-30 15:29:43.306 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-09-30 15:29:43.308 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-09-30 15:29:43.308 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-09-30 15:29:43.319 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:29:43.335 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-09-30 15:29:43.336 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-09-30 15:29:43.337 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-09-30 15:29:43.339 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-09-30 15:29:43.339 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-09-30 15:29:43.340 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-09-30 15:29:43.341 [] [] [] INFO [main] <Run.java [144] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-09-30 15:29:43.424 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-09-30 15:29:47.351 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-09-30 15:29:51.200 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:30:07.715 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:30:42.199 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:30:52.865 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-09-30 15:30:53.111 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:30:53.134 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
     >>03:30:31:变量未定义(VAR_NOT_DEFINED):db_type 位于1行 资源: <% if(db_...
1| <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %>  
 > 
2017-09-30 15:30:58.986 [] [] [] INFO [main] <Run.java [53] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:30:59.005 [] [] [] INFO [main] <Run.java [60] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:30:59.009 [] [] [] INFO [main] <Run.java [63] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:30:59.009 [] [] [] INFO [main] <Run.java [66] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:30:59.094 [] [] [] INFO [main] <Run.java [75] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:30:59.214 [] [] [] INFO [main] <Run.java [87] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:30:59.215 [] [] [] INFO [main] <Run.java [93] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:30:59.219 [] [] [] INFO [main] <Run.java [111] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:30:59.332 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:30:59.333 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:30:59.334 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:30:59.335 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:30:59.335 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:30:59.336 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:30:59.337 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:30:59.337 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:30:59.340 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:30:59.341 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:30:59.341 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:30:59.342 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:30:59.343 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:30:59.343 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:30:59.344 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:30:59.346 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:30:59.346 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:30:59.348 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:30:59.349 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:30:59.350 [] [] [] INFO [main] <Run.java [114] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:30:59.424 [] [] [] INFO [main] <Run.java [117] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:31:03.286 [] [] [] INFO [main] <Run.java [121] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-09-30 15:31:03.305 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-09-30 15:31:03.306 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-09-30 15:31:03.307 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-09-30 15:31:03.307 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-09-30 15:31:03.308 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-09-30 15:31:03.309 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-09-30 15:31:03.310 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-09-30 15:31:03.311 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-09-30 15:31:03.312 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-09-30 15:31:03.315 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-09-30 15:31:03.316 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-09-30 15:31:03.317 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-09-30 15:31:03.318 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-09-30 15:31:03.319 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-09-30 15:31:03.319 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-09-30 15:31:03.321 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-09-30 15:31:03.322 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-09-30 15:31:03.322 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-09-30 15:31:03.323 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-09-30 15:31:03.324 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-09-30 15:31:03.325 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-09-30 15:31:03.325 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-09-30 15:31:03.326 [] [] [] INFO [main] <Run.java [124] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-09-30 15:31:03.328 [] [] [] INFO [main] <Run.java [128] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-09-30 15:31:04.561 [] [] [] INFO [main] <Run.java [141] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-09-30 15:31:04.717 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-09-30 15:31:04.718 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-09-30 15:31:04.719 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-09-30 15:31:04.720 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-09-30 15:31:04.720 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-09-30 15:31:04.721 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-09-30 15:31:04.725 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-09-30 15:31:04.725 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-09-30 15:31:04.733 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-09-30 15:31:04.737 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-09-30 15:31:04.738 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-09-30 15:31:04.744 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-09-30 15:31:04.745 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-09-30 15:31:04.749 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-09-30 15:31:04.750 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-09-30 15:31:04.751 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-09-30 15:31:04.752 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-09-30 15:31:04.753 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-09-30 15:31:04.766 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-09-30 15:31:04.768 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-09-30 15:31:04.773 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-09-30 15:31:04.774 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-09-30 15:31:04.775 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-09-30 15:31:04.775 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-09-30 15:31:04.830 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-09-30 15:31:04.831 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-09-30 15:31:04.831 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-09-30 15:31:04.854 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-09-30 15:31:04.855 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-09-30 15:31:04.876 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:31:04.885 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-09-30 15:31:04.886 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-09-30 15:31:04.886 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:31:04.887 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:31:04.893 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-09-30 15:31:04.894 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:31:04.895 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-09-30 15:31:04.917 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:31:04.919 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:31:04.920 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-09-30 15:31:04.926 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-09-30 15:31:04.927 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-09-30 15:31:04.928 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-09-30 15:31:04.928 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-09-30 15:31:04.929 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-09-30 15:31:04.929 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:31:04.936 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:31:04.970 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-09-30 15:31:04.970 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:31:04.971 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-09-30 15:31:04.972 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-09-30 15:31:04.972 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-09-30 15:31:04.993 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-09-30 15:31:04.994 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-09-30 15:31:04.994 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-09-30 15:31:04.995 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-09-30 15:31:04.998 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-09-30 15:31:04.999 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:31:05.006 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:31:05.007 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-09-30 15:31:05.008 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-09-30 15:31:05.013 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:31:05.014 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:31:05.014 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:31:05.015 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-09-30 15:31:05.015 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-09-30 15:31:05.023 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-09-30 15:31:05.024 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-09-30 15:31:05.024 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-09-30 15:31:05.029 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-09-30 15:31:05.030 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-09-30 15:31:05.030 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-09-30 15:31:05.031 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-09-30 15:31:05.031 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-09-30 15:31:05.032 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:31:05.033 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-09-30 15:31:05.033 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-09-30 15:31:05.034 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:31:05.034 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:31:05.035 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-09-30 15:31:05.035 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:31:05.035 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-09-30 15:31:05.040 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-09-30 15:31:05.051 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-09-30 15:31:05.055 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-09-30 15:31:05.056 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-09-30 15:31:05.057 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-09-30 15:31:05.057 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:31:05.058 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-09-30 15:31:05.059 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-09-30 15:31:05.063 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:31:05.064 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:31:05.067 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-09-30 15:31:05.067 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:31:05.068 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:31:05.069 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-09-30 15:31:05.069 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-09-30 15:31:05.070 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-09-30 15:31:05.074 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:31:05.074 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-09-30 15:31:05.075 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-09-30 15:31:05.076 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-09-30 15:31:05.080 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:31:05.081 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:31:05.081 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-09-30 15:31:05.082 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:31:05.082 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-09-30 15:31:05.086 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-09-30 15:31:05.090 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-09-30 15:31:05.091 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-09-30 15:31:05.092 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-09-30 15:31:05.093 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-09-30 15:31:05.093 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-09-30 15:31:05.096 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-09-30 15:31:05.097 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-09-30 15:31:05.100 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-09-30 15:31:05.105 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-09-30 15:31:05.110 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-09-30 15:31:05.114 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:31:05.115 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-09-30 15:31:05.115 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-09-30 15:31:05.116 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-09-30 15:31:05.116 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-09-30 15:31:05.116 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-09-30 15:31:05.117 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-09-30 15:31:05.131 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:31:05.134 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-09-30 15:31:05.135 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-09-30 15:31:05.135 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-09-30 15:31:05.135 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-09-30 15:31:05.136 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-09-30 15:31:05.136 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-09-30 15:31:05.137 [] [] [] INFO [main] <Run.java [144] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-09-30 15:31:05.257 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-09-30 15:31:08.551 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-09-30 15:31:33.223 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:32:24.231 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:33:15.235 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:34:06.235 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:34:06.684 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:34:07.325 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-09-30 15:34:07.356 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:34:07.369 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
     >>03:34:07:变量未定义(VAR_NOT_DEFINED):db_type 位于1行 资源: <% if(db_...
1| <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %>  
 > 
2017-09-30 15:34:57.233 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:35:48.241 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:36:39.242 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:37:30.317 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:38:21.383 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:39:12.386 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:40:03.397 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:40:54.397 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:41:45.398 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:42:36.403 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:43:27.401 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:44:18.408 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:45:09.412 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:46:00.421 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:46:16.344 [] [] [] INFO [main] <Run.java [55] - <clinit>> <configConstant 视图Beetl设置> 
2017-09-30 15:46:16.502 [] [] [] DEBUG [main] <ToolBeetl.java [45] - regiseter> <注册全局web视图模板解析> 
2017-09-30 15:46:16.509 [] [] [] DEBUG [main] <ToolBeetl.java [62] - regiseter> <注册全局BeetlKit模板解析> 
2017-09-30 15:46:16.518 [] [] [] INFO [main] <Run.java [60] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-09-30 15:46:16.519 [] [] [] INFO [main] <Run.java [67] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-09-30 15:46:16.522 [] [] [] INFO [main] <Run.java [70] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-09-30 15:46:16.522 [] [] [] INFO [main] <Run.java [73] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-09-30 15:46:16.591 [] [] [] INFO [main] <Run.java [82] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-09-30 15:46:16.646 [] [] [] INFO [main] <Run.java [94] - <clinit>> <configPlugin 数据库类型判断> 
2017-09-30 15:46:16.646 [] [] [] INFO [main] <Run.java [100] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-09-30 15:46:16.647 [] [] [] INFO [main] <Run.java [118] - <clinit>> <configPlugin 表自动扫描注册> 
2017-09-30 15:46:16.749 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-09-30 15:46:16.751 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-09-30 15:46:16.751 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-09-30 15:46:16.752 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-09-30 15:46:16.752 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-09-30 15:46:16.755 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-09-30 15:46:16.756 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-09-30 15:46:16.756 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-09-30 15:46:16.757 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-09-30 15:46:16.757 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-09-30 15:46:16.759 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-09-30 15:46:16.760 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-09-30 15:46:16.761 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-09-30 15:46:16.761 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-09-30 15:46:16.774 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-09-30 15:46:16.776 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-09-30 15:46:16.776 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-09-30 15:46:16.777 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-09-30 15:46:16.778 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-09-30 15:46:16.778 [] [] [] INFO [main] <Run.java [121] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-09-30 15:46:16.820 [] [] [] INFO [main] <Run.java [124] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-09-30 15:46:21.196 [] [] [] INFO [main] <Run.java [128] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-09-30 15:46:21.211 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-09-30 15:46:21.212 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-09-30 15:46:21.213 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-09-30 15:46:21.214 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-09-30 15:46:21.215 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-09-30 15:46:21.216 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-09-30 15:46:21.217 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-09-30 15:46:21.218 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-09-30 15:46:21.219 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-09-30 15:46:21.219 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-09-30 15:46:21.220 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-09-30 15:46:21.224 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-09-30 15:46:21.224 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-09-30 15:46:21.225 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-09-30 15:46:21.226 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-09-30 15:46:21.227 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-09-30 15:46:21.228 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-09-30 15:46:21.229 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-09-30 15:46:21.230 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-09-30 15:46:21.231 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-09-30 15:46:21.232 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-09-30 15:46:21.232 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-09-30 15:46:21.233 [] [] [] INFO [main] <Run.java [131] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-09-30 15:46:21.234 [] [] [] INFO [main] <Run.java [135] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-09-30 15:46:22.443 [] [] [] INFO [main] <Run.java [148] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-09-30 15:46:22.584 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-09-30 15:46:22.585 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-09-30 15:46:22.586 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-09-30 15:46:22.586 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-09-30 15:46:22.587 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-09-30 15:46:22.588 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-09-30 15:46:22.591 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-09-30 15:46:22.592 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-09-30 15:46:22.596 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-09-30 15:46:22.602 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-09-30 15:46:22.603 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-09-30 15:46:22.607 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-09-30 15:46:22.608 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-09-30 15:46:22.612 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-09-30 15:46:22.613 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-09-30 15:46:22.614 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-09-30 15:46:22.615 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-09-30 15:46:22.616 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-09-30 15:46:22.620 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-09-30 15:46:22.621 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-09-30 15:46:22.625 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-09-30 15:46:22.626 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-09-30 15:46:22.626 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-09-30 15:46:22.627 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-09-30 15:46:22.633 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-09-30 15:46:22.634 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-09-30 15:46:22.635 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-09-30 15:46:22.636 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-09-30 15:46:22.637 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-09-30 15:46:22.638 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:46:22.641 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-09-30 15:46:22.642 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-09-30 15:46:22.642 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:46:22.643 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:46:22.644 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-09-30 15:46:22.644 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-09-30 15:46:22.645 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-09-30 15:46:22.654 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:46:22.655 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:46:22.655 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-09-30 15:46:22.660 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-09-30 15:46:22.661 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-09-30 15:46:22.661 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-09-30 15:46:22.662 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-09-30 15:46:22.662 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-09-30 15:46:22.663 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:46:22.668 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:46:22.669 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-09-30 15:46:22.700 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:46:22.701 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-09-30 15:46:22.701 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-09-30 15:46:22.702 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-09-30 15:46:22.702 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-09-30 15:46:22.702 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-09-30 15:46:22.703 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-09-30 15:46:22.703 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-09-30 15:46:22.707 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-09-30 15:46:22.708 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:46:22.708 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:46:22.709 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-09-30 15:46:22.709 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-09-30 15:46:22.714 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:46:22.715 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-09-30 15:46:22.715 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-09-30 15:46:22.716 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-09-30 15:46:22.716 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-09-30 15:46:22.717 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-09-30 15:46:22.718 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-09-30 15:46:22.719 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-09-30 15:46:22.723 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-09-30 15:46:22.724 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-09-30 15:46:22.724 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-09-30 15:46:22.725 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-09-30 15:46:22.725 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-09-30 15:46:22.726 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:46:22.726 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-09-30 15:46:22.727 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-09-30 15:46:22.727 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:46:22.728 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-09-30 15:46:22.728 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-09-30 15:46:22.729 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-09-30 15:46:22.729 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-09-30 15:46:22.733 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-09-30 15:46:22.739 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-09-30 15:46:22.743 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-09-30 15:46:22.743 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-09-30 15:46:22.744 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-09-30 15:46:22.744 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-09-30 15:46:22.745 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-09-30 15:46:22.745 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-09-30 15:46:22.749 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:46:22.750 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:46:22.751 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-09-30 15:46:22.751 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-09-30 15:46:22.752 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:46:22.753 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-09-30 15:46:22.753 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-09-30 15:46:22.754 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-09-30 15:46:22.757 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:46:22.758 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-09-30 15:46:22.759 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-09-30 15:46:22.759 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-09-30 15:46:22.762 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-09-30 15:46:22.763 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-09-30 15:46:22.764 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-09-30 15:46:22.764 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-09-30 15:46:22.765 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-09-30 15:46:22.772 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-09-30 15:46:22.776 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-09-30 15:46:22.776 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-09-30 15:46:22.777 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-09-30 15:46:22.777 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-09-30 15:46:22.778 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-09-30 15:46:22.780 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-09-30 15:46:22.781 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-09-30 15:46:22.784 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-09-30 15:46:22.797 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-09-30 15:46:22.797 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-09-30 15:46:22.800 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:46:22.801 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-09-30 15:46:22.801 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-09-30 15:46:22.802 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-09-30 15:46:22.802 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-09-30 15:46:22.803 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-09-30 15:46:22.803 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-09-30 15:46:22.813 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-09-30 15:46:22.816 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-09-30 15:46:22.816 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-09-30 15:46:22.817 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-09-30 15:46:22.817 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-09-30 15:46:22.817 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-09-30 15:46:22.818 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-09-30 15:46:22.819 [] [] [] INFO [main] <Run.java [151] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-09-30 15:46:22.931 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-09-30 15:46:25.875 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-09-30 15:46:38.331 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:46:47.695 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-09-30 15:46:47.726 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:46:47.735 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_user 
    order by
        ids asc limit ? offset ?  
 > 
2017-09-30 15:46:47.789 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-09-30 15:46:47.820 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:47.831 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-09-30 15:46:47.835 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-09-30 15:46:47.837 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-09-30 15:46:47.862 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:47.863 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-09-30 15:46:47.866 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-09-30 15:46:47.866 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-09-30 15:46:47.870 [] [] [] INFO [main] <ParamInitPlugin.java [139] - platform_cacheUser> <缓存加载：User end> 
2017-09-30 15:46:47.871 [] [] [] INFO [main] <ParamInitPlugin.java [147] - platform_cacheGroupOperator> <缓存加载：Group Operator start> 
2017-09-30 15:46:49.544 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:46:49.552 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_group  
 > 
2017-09-30 15:46:49.560 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:46:49.563 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_group 
    order by
        ids asc limit ? offset ?  
 > 
2017-09-30 15:46:49.564 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-09-30 15:46:49.569 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_roleoperator ro 
            on ro.operatorids = o.ids 
    left join
        pt_grouprole gr 
            on gr.roleids = ro.roleids 
    where
        gr.groupids = ?  
 > 
2017-09-30 15:46:49.622 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-09-30 15:46:50.003 [] [] [] INFO [main] <ParamInitPlugin.java [173] - platform_cacheGroupOperator> <缓存加载：Group Operator end> 
2017-09-30 15:46:50.003 [] [] [] INFO [main] <ParamInitPlugin.java [181] - platform_cacheStationOperator> <缓存加载：Station Operator start> 
2017-09-30 15:46:51.494 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:46:52.551 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:46:52.563 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_station  
 > 
2017-09-30 15:46:52.564 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:46:52.568 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_station 
    order by
        ids asc limit ? offset ?  
 > 
2017-09-30 15:46:52.569 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-09-30 15:46:52.572 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-09-30 15:46:52.573 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:52.619 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-09-30 15:46:52.620 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0021 
 > 
2017-09-30 15:46:52.623 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-09-30 15:46:52.624 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0022 
 > 
2017-09-30 15:46:52.626 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-09-30 15:46:52.627 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0023 
 > 
2017-09-30 15:46:52.631 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-09-30 15:46:52.632 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0024 
 > 
2017-09-30 15:46:52.638 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-09-30 15:46:52.639 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0025 
 > 
2017-09-30 15:46:52.641 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-09-30 15:46:52.642 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0026 
 > 
2017-09-30 15:46:52.652 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-09-30 15:46:52.653 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0027 
 > 
2017-09-30 15:46:52.679 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-09-30 15:46:52.680 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-09-30 15:46:52.713 [] [] [] INFO [main] <ParamInitPlugin.java [207] - platform_cacheStationOperator> <缓存加载：Station Operator end> 
2017-09-30 15:46:52.714 [] [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheOperator> <缓存加载：Operator start> 
2017-09-30 15:46:52.714 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-09-30 15:46:52.722 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_operator  
 > 
2017-09-30 15:46:52.723 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:46:52.728 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_operator 
    order by
        ids asc limit ? offset ?  
 > 
2017-09-30 15:46:52.729 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-09-30 15:46:52.821 [] [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheOperator> <缓存加载：Operator end> 
2017-09-30 15:46:52.822 [] [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheDict> <缓存加载：Dict start> 
2017-09-30 15:46:52.823 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_dict  
 > 
2017-09-30 15:46:52.823 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:46:52.829 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:52.830 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-09-30 15:46:52.840 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:52.981 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-09-30 15:46:53.020 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.020 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.026 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.027 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.030 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.031 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-09-30 15:46:53.034 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.034 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-09-30 15:46:53.037 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.038 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-09-30 15:46:53.041 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.041 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-09-30 15:46:53.044 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.045 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-09-30 15:46:53.090 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.091 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-09-30 15:46:53.128 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.128 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-09-30 15:46:53.140 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.141 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-09-30 15:46:53.144 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.145 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-09-30 15:46:53.155 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.156 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-09-30 15:46:53.164 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.165 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-09-30 15:46:53.207 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.208 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-09-30 15:46:53.216 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.216 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-09-30 15:46:53.225 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.226 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-09-30 15:46:53.229 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.230 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.233 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.234 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.237 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.238 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-09-30 15:46:53.259 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.260 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-09-30 15:46:53.266 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.266 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-09-30 15:46:53.273 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.274 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-09-30 15:46:53.277 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.278 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-09-30 15:46:53.281 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.282 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-09-30 15:46:53.286 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.287 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-09-30 15:46:53.290 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.291 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-09-30 15:46:53.295 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.295 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-09-30 15:46:53.299 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.300 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-09-30 15:46:53.303 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.304 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.310 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.311 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.314 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.315 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-09-30 15:46:53.318 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.318 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-09-30 15:46:53.322 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.323 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-09-30 15:46:53.325 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.326 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-09-30 15:46:53.330 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.331 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-09-30 15:46:53.342 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.343 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-09-30 15:46:53.346 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.346 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.349 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.350 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.366 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.367 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-09-30 15:46:53.370 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.371 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-09-30 15:46:53.373 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.374 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.376 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.377 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.381 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.381 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.390 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.391 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.398 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.399 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.402 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.403 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.406 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.406 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.409 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.410 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.414 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.415 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-09-30 15:46:53.420 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.421 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-09-30 15:46:53.424 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.425 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-09-30 15:46:53.454 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.455 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-09-30 15:46:53.463 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.464 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-09-30 15:46:53.490 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.490 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-09-30 15:46:53.514 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.515 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-09-30 15:46:53.518 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.518 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-09-30 15:46:53.522 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.523 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-09-30 15:46:53.526 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.527 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-09-30 15:46:53.529 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.530 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-09-30 15:46:53.532 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.533 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-09-30 15:46:53.537 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.538 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-09-30 15:46:53.546 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.547 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-09-30 15:46:53.553 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.554 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-09-30 15:46:53.568 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.569 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-09-30 15:46:53.589 [] [] [] INFO [main] <ParamInitPlugin.java [261] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2017-09-30 15:46:53.589 [] [] [] INFO [main] <ParamInitPlugin.java [270] - platform_cacheParam> <缓存加载：Param start> 
2017-09-30 15:46:53.590 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_param  
 > 
2017-09-30 15:46:53.591 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-09-30 15:46:53.605 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.606 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-09-30 15:46:53.609 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.611 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-09-30 15:46:53.615 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.616 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.618 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.619 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.622 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.623 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-09-30 15:46:53.625 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.626 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-09-30 15:46:53.628 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.629 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.631 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.632 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.635 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.636 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-09-30 15:46:53.640 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.641 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-09-30 15:46:53.648 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.649 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.657 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.657 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.661 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.661 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.665 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.666 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-09-30 15:46:53.670 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.671 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.674 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.674 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.677 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-09-30 15:46:53.677 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.681 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-09-30 15:46:53.682 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-09-30 15:46:53.685 [] [] [] INFO [main] <ParamInitPlugin.java [277] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2017-09-30 15:46:53.686 [] [] [] INFO [main] <ParamInitPlugin.java [99] - start> <缓存参数初始化 end ...> 
2017-09-30 15:46:53.686 [] [] [] INFO [main] <Run.java [154] - <clinit>> <configPlugin FileRenamePlugin 配置文件上传命名策略插件> 
2017-09-30 15:46:53.700 [] [] [] INFO [main] <Run.java [157] - <clinit>> <configPlugin QuartzPlugin 配置Quartz插件> 
2017-09-30 15:46:54.454 [] [] [] INFO [main] <Run.java [163] - <clinit>> <配置Spring插件> 
2017-09-30 15:47:42.501 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:48:33.512 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:49:24.509 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:50:15.519 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:51:06.514 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:51:57.518 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:52:48.516 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:53:39.520 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:54:30.523 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:55:21.534 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:56:12.533 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:57:03.541 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:57:54.554 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:58:45.560 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 15:59:36.563 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 16:00:27.565 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 16:01:18.575 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 16:02:09.575 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 16:03:00.584 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 16:03:51.586 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 16:04:42.589 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 16:05:33.597 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-09-30 16:06:24.618 [] [] [] ERROR [Druid-ConnectionPool-Create-2100961961] <DruidDataSource.java [2001] - run> <create connection error, url: jdbc:oracle:thin:@172.16.3.50:1521:qzk, errorCode 17002, state null> 
java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:113)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:147)
	at oracle.jdbc.driver.DatabaseError.throwSqlException(DatabaseError.java:257)
	at oracle.jdbc.driver.T4CConnection.logon(T4CConnection.java:389)
	at oracle.jdbc.driver.PhysicalConnection.<init>(PhysicalConnection.java:454)
	at oracle.jdbc.driver.T4CConnection.<init>(T4CConnection.java:165)
	at oracle.jdbc.driver.T4CDriverExtension.getConnection(T4CDriverExtension.java:35)
	at oracle.jdbc.driver.OracleDriver.connect(OracleDriver.java:802)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:148)
	at com.alibaba.druid.filter.FilterAdapter.connection_connect(FilterAdapter.java:785)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.filter.stat.StatFilter.connection_connect(StatFilter.java:211)
	at com.alibaba.druid.filter.FilterChainImpl.connection_connect(FilterChainImpl.java:142)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1423)
	at com.alibaba.druid.pool.DruidAbstractDataSource.createPhysicalConnection(DruidAbstractDataSource.java:1477)
	at com.alibaba.druid.pool.DruidDataSource$CreateConnectionThread.run(DruidDataSource.java:1998)
2017-10-10 12:49:02.910 [] [] [] INFO [main] <Run.java [55] - <clinit>> <configConstant 视图Beetl设置> 
2017-10-10 12:49:05.065 [] [] [] DEBUG [main] <ToolBeetl.java [45] - regiseter> <注册全局web视图模板解析> 
2017-10-10 12:49:05.471 [] [] [] DEBUG [main] <ToolBeetl.java [62] - regiseter> <注册全局BeetlKit模板解析> 
2017-10-10 12:49:05.489 [] [] [] INFO [main] <Run.java [60] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-10-10 12:49:05.490 [] [] [] INFO [main] <Run.java [67] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-10-10 12:49:05.543 [] [] [] INFO [main] <Run.java [70] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-10-10 12:49:05.544 [] [] [] INFO [main] <Run.java [73] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-10-10 12:49:06.399 [] [] [] INFO [main] <Run.java [82] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-10-10 12:49:08.526 [] [] [] INFO [main] <Run.java [94] - <clinit>> <configPlugin 数据库类型判断> 
2017-10-10 12:49:08.527 [] [] [] INFO [main] <Run.java [100] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-10-10 12:49:08.527 [] [] [] INFO [main] <Run.java [118] - <clinit>> <configPlugin 表自动扫描注册> 
2017-10-10 12:49:12.414 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-10-10 12:49:12.414 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-10-10 12:49:12.416 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-10-10 12:49:12.417 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-10-10 12:49:12.418 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-10-10 12:49:12.419 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-10-10 12:49:12.420 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-10-10 12:49:12.420 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-10-10 12:49:12.421 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-10-10 12:49:12.421 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-10-10 12:49:12.421 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-10-10 12:49:12.422 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-10-10 12:49:12.422 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-10-10 12:49:12.423 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-10-10 12:49:12.423 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-10-10 12:49:12.425 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-10-10 12:49:12.426 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-10-10 12:49:12.426 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-10-10 12:49:12.426 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-10-10 12:49:12.427 [] [] [] INFO [main] <Run.java [121] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-10-10 12:49:12.697 [] [] [] INFO [main] <Run.java [124] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-10-10 12:49:21.274 [] [] [] INFO [main] <Run.java [128] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-10-10 12:49:21.317 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-10-10 12:49:21.318 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-10-10 12:49:21.319 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-10-10 12:49:21.320 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-10-10 12:49:21.321 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-10-10 12:49:21.323 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-10-10 12:49:21.325 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-10-10 12:49:21.326 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-10-10 12:49:21.327 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-10-10 12:49:21.328 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-10-10 12:49:21.329 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-10-10 12:49:21.330 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-10-10 12:49:21.331 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-10-10 12:49:21.373 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-10-10 12:49:21.374 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-10-10 12:49:21.375 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-10-10 12:49:21.376 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-10-10 12:49:21.378 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-10-10 12:49:21.379 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-10-10 12:49:21.381 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-10-10 12:49:21.382 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-10-10 12:49:21.383 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-10-10 12:49:21.416 [] [] [] INFO [main] <Run.java [131] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-10-10 12:49:21.442 [] [] [] INFO [main] <Run.java [135] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-10-10 12:49:23.924 [] [] [] INFO [main] <Run.java [148] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-10-10 12:49:24.571 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-10-10 12:49:24.572 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-10-10 12:49:24.573 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-10-10 12:49:24.574 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-10-10 12:49:24.574 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-10-10 12:49:24.575 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-10-10 12:49:24.619 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-10-10 12:49:24.620 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-10-10 12:49:24.673 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-10-10 12:49:24.675 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-10-10 12:49:24.676 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-10-10 12:49:24.702 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-10-10 12:49:24.703 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-10-10 12:49:24.766 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-10-10 12:49:24.767 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-10-10 12:49:24.768 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-10-10 12:49:24.768 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-10-10 12:49:24.770 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-10-10 12:49:24.801 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-10-10 12:49:24.805 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-10-10 12:49:24.834 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-10-10 12:49:24.835 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-10-10 12:49:24.836 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-10-10 12:49:24.836 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-10-10 12:49:24.878 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-10-10 12:49:24.879 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-10-10 12:49:24.881 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-10-10 12:49:24.883 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-10-10 12:49:24.884 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-10-10 12:49:24.885 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 12:49:24.887 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-10-10 12:49:24.898 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-10-10 12:49:24.899 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 12:49:24.900 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 12:49:24.902 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-10-10 12:49:24.903 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 12:49:24.906 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-10-10 12:49:24.948 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:49:24.950 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 12:49:24.951 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-10-10 12:49:24.973 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-10-10 12:49:24.975 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-10-10 12:49:24.976 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-10-10 12:49:24.977 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-10-10 12:49:24.979 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-10-10 12:49:24.980 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 12:49:25.002 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-10-10 12:49:25.003 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-10-10 12:49:25.003 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-10-10 12:49:25.006 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-10-10 12:49:25.007 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-10-10 12:49:25.007 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-10-10 12:49:25.008 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-10-10 12:49:25.009 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-10-10 12:49:25.009 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-10-10 12:49:25.010 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-10-10 12:49:25.036 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-10-10 12:49:25.036 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 12:49:25.037 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 12:49:25.037 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-10-10 12:49:25.038 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-10-10 12:49:25.125 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:49:25.126 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 12:49:25.136 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 12:49:25.139 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-10-10 12:49:25.147 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-10-10 12:49:25.148 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-10-10 12:49:25.154 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-10-10 12:49:25.156 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-10-10 12:49:25.220 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-10-10 12:49:25.221 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-10-10 12:49:25.222 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-10-10 12:49:25.223 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-10-10 12:49:25.224 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-10-10 12:49:25.224 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 12:49:25.227 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-10-10 12:49:25.228 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-10-10 12:49:25.228 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 12:49:25.229 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 12:49:25.248 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-10-10 12:49:25.249 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 12:49:25.249 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-10-10 12:49:25.289 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-10-10 12:49:25.290 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-10-10 12:49:25.314 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-10-10 12:49:25.314 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-10-10 12:49:25.315 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-10-10 12:49:25.315 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 12:49:25.315 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-10-10 12:49:25.315 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-10-10 12:49:25.338 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 12:49:25.340 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 12:49:25.341 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-10-10 12:49:25.341 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 12:49:25.341 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-10-10 12:49:25.342 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-10-10 12:49:25.342 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-10-10 12:49:25.344 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-10-10 12:49:25.358 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:49:25.358 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-10-10 12:49:25.358 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-10-10 12:49:25.360 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-10-10 12:49:25.391 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 12:49:25.392 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 12:49:25.392 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-10-10 12:49:25.393 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-10-10 12:49:25.393 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-10-10 12:49:25.393 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-10-10 12:49:25.439 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-10-10 12:49:25.439 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-10-10 12:49:25.440 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-10-10 12:49:25.441 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-10-10 12:49:25.441 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-10-10 12:49:25.452 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-10-10 12:49:25.453 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-10-10 12:49:25.463 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-10-10 12:49:25.500 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-10-10 12:49:25.501 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-10-10 12:49:25.596 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:49:25.598 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-10-10 12:49:25.599 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-10-10 12:49:25.600 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-10-10 12:49:25.601 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-10-10 12:49:25.602 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-10-10 12:49:25.603 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-10-10 12:49:25.659 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:49:25.721 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-10-10 12:49:25.722 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-10-10 12:49:25.722 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-10-10 12:49:25.723 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-10-10 12:49:25.724 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-10-10 12:49:25.725 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-10-10 12:49:25.726 [] [] [] INFO [main] <Run.java [151] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-10-10 12:49:26.245 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-10-10 12:49:31.237 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-10-10 12:49:31.297 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 12:49:32.357 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-10-10 12:49:32.466 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:49:32.805 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_user 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 12:49:32.883 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 12:49:32.944 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:32.961 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 12:49:32.966 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 12:49:32.967 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 12:49:33.069 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:33.069 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 12:49:33.072 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 12:49:33.073 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 12:49:33.078 [] [] [] INFO [main] <ParamInitPlugin.java [139] - platform_cacheUser> <缓存加载：User end> 
2017-10-10 12:49:33.078 [] [] [] INFO [main] <ParamInitPlugin.java [147] - platform_cacheGroupOperator> <缓存加载：Group Operator start> 
2017-10-10 12:49:33.079 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 12:49:33.087 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_group  
 > 
2017-10-10 12:49:33.088 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:49:33.090 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_group 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 12:49:33.091 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 12:49:33.095 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_roleoperator ro 
            on ro.operatorids = o.ids 
    left join
        pt_grouprole gr 
            on gr.roleids = ro.roleids 
    where
        gr.groupids = ?  
 > 
2017-10-10 12:49:33.116 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 12:49:33.184 [] [] [] INFO [main] <ParamInitPlugin.java [173] - platform_cacheGroupOperator> <缓存加载：Group Operator end> 
2017-10-10 12:49:33.184 [] [] [] INFO [main] <ParamInitPlugin.java [181] - platform_cacheStationOperator> <缓存加载：Station Operator start> 
2017-10-10 12:49:33.185 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 12:49:33.206 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_station  
 > 
2017-10-10 12:49:33.207 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:49:33.225 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_station 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 12:49:33.226 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 12:49:33.233 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:49:33.235 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:33.247 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:49:33.248 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0021 
 > 
2017-10-10 12:49:33.252 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:49:33.252 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0022 
 > 
2017-10-10 12:49:33.256 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:49:33.256 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0023 
 > 
2017-10-10 12:49:33.260 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:49:33.261 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0024 
 > 
2017-10-10 12:49:33.271 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:49:33.274 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0025 
 > 
2017-10-10 12:49:33.279 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:49:33.279 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0026 
 > 
2017-10-10 12:49:33.293 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:49:33.294 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0027 
 > 
2017-10-10 12:49:33.297 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:49:33.298 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 12:49:33.301 [] [] [] INFO [main] <ParamInitPlugin.java [207] - platform_cacheStationOperator> <缓存加载：Station Operator end> 
2017-10-10 12:49:33.301 [] [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheOperator> <缓存加载：Operator start> 
2017-10-10 12:49:33.301 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 12:49:33.365 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_operator  
 > 
2017-10-10 12:49:33.367 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:49:33.370 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_operator 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 12:49:33.371 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 12:49:33.615 [] [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheOperator> <缓存加载：Operator end> 
2017-10-10 12:49:33.615 [] [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheDict> <缓存加载：Dict start> 
2017-10-10 12:49:33.617 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_dict  
 > 
2017-10-10 12:49:33.618 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:49:33.641 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:33.643 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 12:49:33.663 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.076 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 12:49:34.104 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.110 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.115 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.116 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.126 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.129 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:49:34.133 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.134 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:49:34.139 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.139 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:49:34.143 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.144 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:49:34.148 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.148 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 12:49:34.152 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.153 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 12:49:34.156 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.156 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:49:34.160 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.161 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:49:34.165 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.166 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 12:49:34.185 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.187 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 12:49:34.190 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.191 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:49:34.195 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.197 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:49:34.210 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.211 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:49:34.224 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.225 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:49:34.235 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.236 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.239 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.240 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.253 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.254 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 12:49:34.259 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.260 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 12:49:34.267 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.268 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:49:34.271 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.272 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:49:34.281 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.282 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 12:49:34.285 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.287 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 12:49:34.291 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.291 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:49:34.295 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.296 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:49:34.301 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.301 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:49:34.308 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.310 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:49:34.316 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.316 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.320 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.321 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.326 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.326 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:49:34.330 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.332 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:49:34.336 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.337 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:49:34.341 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.342 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:49:34.353 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.354 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 12:49:34.361 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.362 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 12:49:34.368 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.369 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.374 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.376 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.384 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.385 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 12:49:34.390 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.391 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 12:49:34.395 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.396 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.400 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.401 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.410 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.411 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.424 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.426 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.430 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.430 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.434 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.436 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.441 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.441 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.445 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.446 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.450 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.450 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:49:34.453 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.454 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:49:34.459 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.459 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:49:34.463 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.464 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:49:34.468 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.469 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 12:49:34.473 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.474 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 12:49:34.477 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.478 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:49:34.488 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.489 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:49:34.493 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.494 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 12:49:34.497 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.498 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 12:49:34.501 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.502 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:49:34.505 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.507 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:49:34.528 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.529 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 12:49:34.561 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.582 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 12:49:34.597 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.597 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:49:34.604 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.605 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:49:34.610 [] [] [] INFO [main] <ParamInitPlugin.java [261] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2017-10-10 12:49:34.610 [] [] [] INFO [main] <ParamInitPlugin.java [270] - platform_cacheParam> <缓存加载：Param start> 
2017-10-10 12:49:34.612 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_param  
 > 
2017-10-10 12:49:34.613 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:49:34.618 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.621 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 12:49:34.628 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.630 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 12:49:34.637 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.637 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.642 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.644 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.648 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.648 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 12:49:34.652 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.653 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 12:49:34.659 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.660 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.663 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.664 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.669 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.669 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 12:49:34.674 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.675 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 12:49:34.680 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.681 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.684 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.685 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.691 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.692 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.695 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.696 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:49:34.700 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.700 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.703 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.704 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.708 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:49:34.709 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.712 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:49:34.713 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:49:34.716 [] [] [] INFO [main] <ParamInitPlugin.java [277] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2017-10-10 12:49:34.717 [] [] [] INFO [main] <ParamInitPlugin.java [99] - start> <缓存参数初始化 end ...> 
2017-10-10 12:49:34.717 [] [] [] INFO [main] <Run.java [154] - <clinit>> <configPlugin FileRenamePlugin 配置文件上传命名策略插件> 
2017-10-10 12:49:34.923 [] [] [] INFO [main] <Run.java [157] - <clinit>> <configPlugin QuartzPlugin 配置Quartz插件> 
2017-10-10 12:54:31.082 [] [] [] INFO [main] <Run.java [55] - <clinit>> <configConstant 视图Beetl设置> 
2017-10-10 12:54:33.068 [] [] [] DEBUG [main] <ToolBeetl.java [45] - regiseter> <注册全局web视图模板解析> 
2017-10-10 12:54:33.248 [] [] [] DEBUG [main] <ToolBeetl.java [62] - regiseter> <注册全局BeetlKit模板解析> 
2017-10-10 12:54:33.256 [] [] [] INFO [main] <Run.java [60] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-10-10 12:54:33.257 [] [] [] INFO [main] <Run.java [67] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-10-10 12:54:33.260 [] [] [] INFO [main] <Run.java [70] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-10-10 12:54:33.261 [] [] [] INFO [main] <Run.java [73] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-10-10 12:54:33.430 [] [] [] INFO [main] <Run.java [82] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-10-10 12:54:34.526 [] [] [] INFO [main] <Run.java [94] - <clinit>> <configPlugin 数据库类型判断> 
2017-10-10 12:54:34.527 [] [] [] INFO [main] <Run.java [100] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-10-10 12:54:34.527 [] [] [] INFO [main] <Run.java [118] - <clinit>> <configPlugin 表自动扫描注册> 
2017-10-10 12:54:36.981 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-10-10 12:54:36.982 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-10-10 12:54:36.983 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-10-10 12:54:36.983 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-10-10 12:54:36.984 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-10-10 12:54:36.987 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-10-10 12:54:36.987 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-10-10 12:54:36.988 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-10-10 12:54:36.988 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-10-10 12:54:36.989 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-10-10 12:54:36.990 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-10-10 12:54:36.990 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-10-10 12:54:36.990 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-10-10 12:54:36.991 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-10-10 12:54:36.991 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-10-10 12:54:36.995 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-10-10 12:54:36.996 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-10-10 12:54:36.997 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-10-10 12:54:36.997 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-10-10 12:54:36.997 [] [] [] INFO [main] <Run.java [121] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-10-10 12:54:37.015 [] [] [] INFO [main] <Run.java [124] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-10-10 12:54:40.045 [] [] [] INFO [main] <Run.java [128] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-10-10 12:54:40.062 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-10-10 12:54:40.062 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-10-10 12:54:40.064 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-10-10 12:54:40.065 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-10-10 12:54:40.067 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-10-10 12:54:40.068 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-10-10 12:54:40.069 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-10-10 12:54:40.071 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-10-10 12:54:40.072 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-10-10 12:54:40.073 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-10-10 12:54:40.074 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-10-10 12:54:40.078 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-10-10 12:54:40.080 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-10-10 12:54:40.081 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-10-10 12:54:40.082 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-10-10 12:54:40.084 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-10-10 12:54:40.085 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-10-10 12:54:40.087 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-10-10 12:54:40.088 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-10-10 12:54:40.089 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-10-10 12:54:40.090 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-10-10 12:54:40.091 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-10-10 12:54:40.093 [] [] [] INFO [main] <Run.java [131] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-10-10 12:54:40.094 [] [] [] INFO [main] <Run.java [135] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-10-10 12:54:41.209 [] [] [] INFO [main] <Run.java [148] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-10-10 12:54:41.346 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-10-10 12:54:41.347 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-10-10 12:54:41.348 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-10-10 12:54:41.348 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-10-10 12:54:41.349 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-10-10 12:54:41.350 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-10-10 12:54:41.379 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-10-10 12:54:41.380 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-10-10 12:54:41.390 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-10-10 12:54:41.391 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-10-10 12:54:41.391 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-10-10 12:54:41.408 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-10-10 12:54:41.409 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-10-10 12:54:41.433 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-10-10 12:54:41.434 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-10-10 12:54:41.435 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-10-10 12:54:41.436 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-10-10 12:54:41.437 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-10-10 12:54:41.513 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-10-10 12:54:41.514 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-10-10 12:54:41.589 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-10-10 12:54:41.591 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-10-10 12:54:41.592 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-10-10 12:54:41.593 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-10-10 12:54:41.666 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-10-10 12:54:41.667 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-10-10 12:54:41.667 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-10-10 12:54:41.668 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-10-10 12:54:41.668 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-10-10 12:54:41.668 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 12:54:41.669 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-10-10 12:54:41.669 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-10-10 12:54:41.669 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 12:54:41.670 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 12:54:41.670 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-10-10 12:54:41.671 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 12:54:41.671 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-10-10 12:54:41.825 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:54:41.826 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 12:54:41.827 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-10-10 12:54:41.878 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-10-10 12:54:41.880 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-10-10 12:54:41.880 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-10-10 12:54:41.881 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-10-10 12:54:41.882 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-10-10 12:54:41.882 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 12:54:41.947 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-10-10 12:54:41.947 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-10-10 12:54:41.948 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-10-10 12:54:41.948 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-10-10 12:54:41.949 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-10-10 12:54:41.949 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-10-10 12:54:41.949 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-10-10 12:54:41.950 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-10-10 12:54:41.950 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-10-10 12:54:41.951 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-10-10 12:54:41.973 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-10-10 12:54:41.974 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 12:54:41.974 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 12:54:41.975 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-10-10 12:54:41.976 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-10-10 12:54:41.995 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:54:41.995 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 12:54:41.996 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 12:54:41.996 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-10-10 12:54:41.997 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-10-10 12:54:41.997 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-10-10 12:54:41.999 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-10-10 12:54:41.999 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-10-10 12:54:42.015 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-10-10 12:54:42.016 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-10-10 12:54:42.016 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-10-10 12:54:42.017 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-10-10 12:54:42.018 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-10-10 12:54:42.018 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 12:54:42.019 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-10-10 12:54:42.019 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-10-10 12:54:42.020 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 12:54:42.021 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 12:54:42.022 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-10-10 12:54:42.022 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 12:54:42.024 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-10-10 12:54:42.094 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-10-10 12:54:42.096 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-10-10 12:54:42.150 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-10-10 12:54:42.151 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-10-10 12:54:42.151 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-10-10 12:54:42.152 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 12:54:42.152 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-10-10 12:54:42.153 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-10-10 12:54:42.206 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 12:54:42.207 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 12:54:42.208 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-10-10 12:54:42.209 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 12:54:42.210 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-10-10 12:54:42.210 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-10-10 12:54:42.211 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-10-10 12:54:42.211 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-10-10 12:54:42.219 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:54:42.220 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-10-10 12:54:42.221 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-10-10 12:54:42.221 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-10-10 12:54:42.294 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 12:54:42.295 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 12:54:42.296 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-10-10 12:54:42.297 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-10-10 12:54:42.297 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-10-10 12:54:42.300 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-10-10 12:54:42.351 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-10-10 12:54:42.352 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-10-10 12:54:42.352 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-10-10 12:54:42.352 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-10-10 12:54:42.353 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-10-10 12:54:42.362 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-10-10 12:54:42.363 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-10-10 12:54:42.366 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-10-10 12:54:42.434 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-10-10 12:54:42.434 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-10-10 12:54:42.530 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:54:42.531 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-10-10 12:54:42.531 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-10-10 12:54:42.532 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-10-10 12:54:42.532 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-10-10 12:54:42.533 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-10-10 12:54:42.533 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-10-10 12:54:42.558 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 12:54:42.563 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-10-10 12:54:42.564 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-10-10 12:54:42.565 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-10-10 12:54:42.565 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-10-10 12:54:42.566 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-10-10 12:54:42.566 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-10-10 12:54:42.567 [] [] [] INFO [main] <Run.java [151] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-10-10 12:54:42.610 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-10-10 12:54:45.210 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-10-10 12:54:45.266 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 12:54:45.739 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-10-10 12:54:45.765 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:54:45.778 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_user 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 12:54:45.790 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 12:54:45.834 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:45.841 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 12:54:45.850 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 12:54:45.851 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 12:54:45.908 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:45.909 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 12:54:45.926 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 12:54:45.927 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 12:54:45.972 [] [] [] INFO [main] <ParamInitPlugin.java [139] - platform_cacheUser> <缓存加载：User end> 
2017-10-10 12:54:45.973 [] [] [] INFO [main] <ParamInitPlugin.java [147] - platform_cacheGroupOperator> <缓存加载：Group Operator start> 
2017-10-10 12:54:45.973 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 12:54:45.987 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_group  
 > 
2017-10-10 12:54:45.988 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:54:46.035 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_group 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 12:54:46.037 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 12:54:46.057 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_roleoperator ro 
            on ro.operatorids = o.ids 
    left join
        pt_grouprole gr 
            on gr.roleids = ro.roleids 
    where
        gr.groupids = ?  
 > 
2017-10-10 12:54:46.062 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 12:54:46.087 [] [] [] INFO [main] <ParamInitPlugin.java [173] - platform_cacheGroupOperator> <缓存加载：Group Operator end> 
2017-10-10 12:54:46.087 [] [] [] INFO [main] <ParamInitPlugin.java [181] - platform_cacheStationOperator> <缓存加载：Station Operator start> 
2017-10-10 12:54:46.087 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 12:54:46.095 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_station  
 > 
2017-10-10 12:54:46.096 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:54:46.116 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_station 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 12:54:46.119 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 12:54:46.131 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:54:46.133 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:46.139 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:54:46.139 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0021 
 > 
2017-10-10 12:54:46.145 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:54:46.146 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0022 
 > 
2017-10-10 12:54:46.151 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:54:46.153 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0023 
 > 
2017-10-10 12:54:46.161 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:54:46.162 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0024 
 > 
2017-10-10 12:54:46.171 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:54:46.172 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0025 
 > 
2017-10-10 12:54:46.178 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:54:46.180 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0026 
 > 
2017-10-10 12:54:46.211 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:54:46.211 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0027 
 > 
2017-10-10 12:54:46.251 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 12:54:46.252 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 12:54:46.265 [] [] [] INFO [main] <ParamInitPlugin.java [207] - platform_cacheStationOperator> <缓存加载：Station Operator end> 
2017-10-10 12:54:46.265 [] [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheOperator> <缓存加载：Operator start> 
2017-10-10 12:54:46.265 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 12:54:46.273 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_operator  
 > 
2017-10-10 12:54:46.274 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:54:46.284 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_operator 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 12:54:46.285 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 12:54:46.431 [] [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheOperator> <缓存加载：Operator end> 
2017-10-10 12:54:46.431 [] [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheDict> <缓存加载：Dict start> 
2017-10-10 12:54:46.433 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_dict  
 > 
2017-10-10 12:54:46.433 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:54:46.459 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.461 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 12:54:46.484 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.519 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 12:54:46.524 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.525 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.529 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.530 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.535 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.536 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:54:46.556 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.557 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:54:46.564 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.564 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:54:46.570 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.571 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:54:46.576 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.577 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 12:54:46.582 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.583 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 12:54:46.589 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.590 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:54:46.596 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.596 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:54:46.601 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.602 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 12:54:46.616 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.617 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 12:54:46.623 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.623 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:54:46.632 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.632 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:54:46.643 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.644 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:54:46.655 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.656 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:54:46.665 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.666 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:46.670 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.671 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:46.689 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.689 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 12:54:46.718 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.720 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 12:54:46.724 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.725 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:54:46.732 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.733 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:54:46.740 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.740 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 12:54:46.745 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.747 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 12:54:46.752 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.752 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:54:46.757 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.758 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:54:46.764 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.764 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:54:46.769 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.770 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:54:46.774 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.775 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:46.779 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.780 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:46.785 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.785 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:54:46.790 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.791 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:54:46.796 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.796 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:54:46.800 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.800 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:54:46.805 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.806 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 12:54:46.811 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.811 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 12:54:46.816 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.816 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.821 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.822 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.827 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.828 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 12:54:46.832 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.833 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 12:54:46.838 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.838 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.842 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.843 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.848 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.848 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.853 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.854 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.858 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.859 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:46.868 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.871 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:46.877 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.878 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:46.883 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.884 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:46.895 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.896 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:54:46.901 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.902 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 12:54:46.906 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.907 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:54:46.911 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.912 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 12:54:46.917 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.917 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 12:54:46.921 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.921 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 12:54:46.925 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.925 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:54:46.930 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.930 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 12:54:46.935 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.935 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 12:54:46.939 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.940 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 12:54:46.944 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.945 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:54:46.949 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.949 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 12:54:46.955 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.955 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 12:54:46.961 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.962 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 12:54:46.967 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.967 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:54:46.971 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.972 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 12:54:46.975 [] [] [] INFO [main] <ParamInitPlugin.java [261] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2017-10-10 12:54:46.975 [] [] [] INFO [main] <ParamInitPlugin.java [270] - platform_cacheParam> <缓存加载：Param start> 
2017-10-10 12:54:46.976 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_param  
 > 
2017-10-10 12:54:46.977 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 12:54:46.981 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.981 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 12:54:46.985 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.985 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 12:54:46.990 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:46.990 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.994 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:46.995 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:46.999 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:47.000 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 12:54:47.005 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:47.005 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 12:54:47.010 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:47.011 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:47.015 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:47.016 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:47.020 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:47.021 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 12:54:47.025 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:47.026 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 12:54:47.031 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:47.031 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:47.035 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:47.036 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:47.040 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:47.041 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:47.047 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:47.048 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 12:54:47.053 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:47.054 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:47.062 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:47.063 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:47.074 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 12:54:47.074 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:47.084 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 12:54:47.085 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 12:54:47.090 [] [] [] INFO [main] <ParamInitPlugin.java [277] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2017-10-10 12:54:47.090 [] [] [] INFO [main] <ParamInitPlugin.java [99] - start> <缓存参数初始化 end ...> 
2017-10-10 12:54:47.091 [] [] [] INFO [main] <Run.java [154] - <clinit>> <configPlugin FileRenamePlugin 配置文件上传命名策略插件> 
2017-10-10 12:54:47.182 [] [] [] INFO [main] <Run.java [157] - <clinit>> <configPlugin QuartzPlugin 配置Quartz插件> 
2017-10-10 12:54:47.421 [] [] [] INFO [main] <? [?] - ?> <using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter> 
2017-10-10 12:54:47.709 [] [] [] INFO [main] <Main.java [58] - main> < [DUBBO] Use container type([spring]) to run dubbo serivce., dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 12:54:48.386 [] [] [] INFO [main] <Main.java [81] - main> < [DUBBO] Dubbo SpringContainer started!, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:22.821 [] [] [] INFO [main] <Run.java [55] - <clinit>> <configConstant 视图Beetl设置> 
2017-10-10 13:03:23.412 [] [] [] DEBUG [main] <ToolBeetl.java [45] - regiseter> <注册全局web视图模板解析> 
2017-10-10 13:03:23.466 [] [] [] DEBUG [main] <ToolBeetl.java [62] - regiseter> <注册全局BeetlKit模板解析> 
2017-10-10 13:03:23.482 [] [] [] INFO [main] <Run.java [60] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-10-10 13:03:23.483 [] [] [] INFO [main] <Run.java [67] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-10-10 13:03:23.490 [] [] [] INFO [main] <Run.java [70] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-10-10 13:03:23.491 [] [] [] INFO [main] <Run.java [73] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-10-10 13:03:24.193 [] [] [] INFO [main] <Run.java [82] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-10-10 13:03:24.394 [] [] [] INFO [main] <Run.java [94] - <clinit>> <configPlugin 数据库类型判断> 
2017-10-10 13:03:24.395 [] [] [] INFO [main] <Run.java [100] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-10-10 13:03:24.396 [] [] [] INFO [main] <Run.java [118] - <clinit>> <configPlugin 表自动扫描注册> 
2017-10-10 13:03:24.876 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-10-10 13:03:24.876 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-10-10 13:03:24.877 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-10-10 13:03:24.878 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-10-10 13:03:24.878 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-10-10 13:03:24.887 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-10-10 13:03:24.888 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-10-10 13:03:24.889 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-10-10 13:03:24.889 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-10-10 13:03:24.890 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-10-10 13:03:24.891 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-10-10 13:03:24.892 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-10-10 13:03:24.892 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-10-10 13:03:24.893 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-10-10 13:03:24.893 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-10-10 13:03:24.902 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-10-10 13:03:24.903 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-10-10 13:03:24.904 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-10-10 13:03:24.905 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-10-10 13:03:24.905 [] [] [] INFO [main] <Run.java [121] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-10-10 13:03:24.984 [] [] [] INFO [main] <Run.java [124] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-10-10 13:03:28.632 [] [] [] INFO [main] <Run.java [128] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-10-10 13:03:28.659 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-10-10 13:03:28.662 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-10-10 13:03:28.663 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-10-10 13:03:28.664 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-10-10 13:03:28.666 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-10-10 13:03:28.667 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-10-10 13:03:28.668 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-10-10 13:03:28.670 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-10-10 13:03:28.671 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-10-10 13:03:28.672 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-10-10 13:03:28.674 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-10-10 13:03:28.675 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-10-10 13:03:28.676 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-10-10 13:03:28.677 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-10-10 13:03:28.678 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-10-10 13:03:28.680 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-10-10 13:03:28.682 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-10-10 13:03:28.682 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-10-10 13:03:28.684 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-10-10 13:03:28.685 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-10-10 13:03:28.687 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-10-10 13:03:28.693 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-10-10 13:03:28.698 [] [] [] INFO [main] <Run.java [131] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-10-10 13:03:28.701 [] [] [] INFO [main] <Run.java [135] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-10-10 13:03:31.273 [] [] [] INFO [main] <Run.java [148] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-10-10 13:03:31.445 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-10-10 13:03:31.446 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-10-10 13:03:31.447 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-10-10 13:03:31.448 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-10-10 13:03:31.450 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-10-10 13:03:31.451 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-10-10 13:03:31.455 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-10-10 13:03:31.458 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-10-10 13:03:31.463 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-10-10 13:03:31.494 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-10-10 13:03:31.496 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-10-10 13:03:31.510 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-10-10 13:03:31.511 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-10-10 13:03:31.524 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-10-10 13:03:31.525 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-10-10 13:03:31.526 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-10-10 13:03:31.527 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-10-10 13:03:31.528 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-10-10 13:03:31.538 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-10-10 13:03:31.539 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-10-10 13:03:31.545 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-10-10 13:03:31.546 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-10-10 13:03:31.547 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-10-10 13:03:31.551 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-10-10 13:03:31.564 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-10-10 13:03:31.564 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-10-10 13:03:31.565 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-10-10 13:03:31.566 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-10-10 13:03:31.567 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-10-10 13:03:31.568 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 13:03:31.568 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-10-10 13:03:31.569 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-10-10 13:03:31.570 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:03:31.571 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:03:31.571 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-10-10 13:03:31.572 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 13:03:31.573 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-10-10 13:03:31.579 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:03:31.580 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 13:03:31.581 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-10-10 13:03:31.593 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-10-10 13:03:31.594 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-10-10 13:03:31.596 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-10-10 13:03:31.597 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-10-10 13:03:31.598 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-10-10 13:03:31.599 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 13:03:31.608 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:03:31.608 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-10-10 13:03:31.609 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:03:31.610 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-10-10 13:03:31.611 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-10-10 13:03:31.623 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-10-10 13:03:31.624 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-10-10 13:03:31.625 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-10-10 13:03:31.625 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-10-10 13:03:31.626 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-10-10 13:03:31.634 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-10-10 13:03:31.635 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 13:03:31.636 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 13:03:31.636 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-10-10 13:03:31.637 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-10-10 13:03:31.646 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:03:31.647 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 13:03:31.649 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 13:03:31.652 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-10-10 13:03:31.653 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-10-10 13:03:31.653 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-10-10 13:03:31.654 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-10-10 13:03:31.655 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-10-10 13:03:31.661 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-10-10 13:03:31.662 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-10-10 13:03:31.663 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-10-10 13:03:31.663 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-10-10 13:03:31.664 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-10-10 13:03:31.665 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 13:03:31.669 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-10-10 13:03:31.670 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-10-10 13:03:31.670 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:03:31.671 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:03:31.671 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-10-10 13:03:31.672 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 13:03:31.672 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-10-10 13:03:31.677 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-10-10 13:03:31.678 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-10-10 13:03:31.691 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-10-10 13:03:31.692 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-10-10 13:03:31.693 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-10-10 13:03:31.693 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 13:03:31.701 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-10-10 13:03:31.702 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-10-10 13:03:31.718 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:03:31.719 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 13:03:31.719 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-10-10 13:03:31.720 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 13:03:31.721 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:03:31.721 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-10-10 13:03:31.722 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-10-10 13:03:31.722 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-10-10 13:03:31.727 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:03:31.755 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-10-10 13:03:31.756 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-10-10 13:03:31.757 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-10-10 13:03:31.770 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:03:31.771 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 13:03:31.771 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-10-10 13:03:31.772 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:03:31.772 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-10-10 13:03:31.773 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-10-10 13:03:31.778 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-10-10 13:03:31.779 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-10-10 13:03:31.780 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-10-10 13:03:31.786 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-10-10 13:03:31.787 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-10-10 13:03:31.791 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-10-10 13:03:31.792 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-10-10 13:03:31.796 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-10-10 13:03:31.801 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-10-10 13:03:31.801 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-10-10 13:03:31.806 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:03:31.807 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-10-10 13:03:31.807 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-10-10 13:03:31.811 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-10-10 13:03:31.811 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-10-10 13:03:31.812 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-10-10 13:03:31.821 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-10-10 13:03:31.824 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:03:31.831 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-10-10 13:03:31.832 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-10-10 13:03:31.833 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-10-10 13:03:31.834 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-10-10 13:03:31.835 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-10-10 13:03:31.835 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-10-10 13:03:31.837 [] [] [] INFO [main] <Run.java [151] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-10-10 13:03:31.963 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-10-10 13:03:34.331 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-10-10 13:03:34.337 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:03:34.872 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-10-10 13:03:34.909 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:03:34.924 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_user 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:03:34.939 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:03:34.954 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:34.967 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 13:03:34.974 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 13:03:34.977 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 13:03:35.010 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.010 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 13:03:35.015 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 13:03:35.016 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 13:03:35.023 [] [] [] INFO [main] <ParamInitPlugin.java [139] - platform_cacheUser> <缓存加载：User end> 
2017-10-10 13:03:35.024 [] [] [] INFO [main] <ParamInitPlugin.java [147] - platform_cacheGroupOperator> <缓存加载：Group Operator start> 
2017-10-10 13:03:35.024 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:03:35.039 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_group  
 > 
2017-10-10 13:03:35.040 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:03:35.045 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_group 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:03:35.046 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:03:35.053 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_roleoperator ro 
            on ro.operatorids = o.ids 
    left join
        pt_grouprole gr 
            on gr.roleids = ro.roleids 
    where
        gr.groupids = ?  
 > 
2017-10-10 13:03:35.058 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 13:03:35.085 [] [] [] INFO [main] <ParamInitPlugin.java [173] - platform_cacheGroupOperator> <缓存加载：Group Operator end> 
2017-10-10 13:03:35.086 [] [] [] INFO [main] <ParamInitPlugin.java [181] - platform_cacheStationOperator> <缓存加载：Station Operator start> 
2017-10-10 13:03:35.089 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:03:35.107 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_station  
 > 
2017-10-10 13:03:35.108 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:03:35.113 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_station 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:03:35.114 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:03:35.162 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:03:35.164 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:35.169 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:03:35.170 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0021 
 > 
2017-10-10 13:03:35.175 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:03:35.176 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0022 
 > 
2017-10-10 13:03:35.183 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:03:35.184 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0023 
 > 
2017-10-10 13:03:35.189 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:03:35.191 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0024 
 > 
2017-10-10 13:03:35.198 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:03:35.201 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0025 
 > 
2017-10-10 13:03:35.206 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:03:35.207 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0026 
 > 
2017-10-10 13:03:35.223 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:03:35.223 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0027 
 > 
2017-10-10 13:03:35.235 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:03:35.236 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 13:03:35.241 [] [] [] INFO [main] <ParamInitPlugin.java [207] - platform_cacheStationOperator> <缓存加载：Station Operator end> 
2017-10-10 13:03:35.242 [] [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheOperator> <缓存加载：Operator start> 
2017-10-10 13:03:35.242 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:03:35.260 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_operator  
 > 
2017-10-10 13:03:35.262 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:03:35.266 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_operator 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:03:35.268 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:03:35.425 [] [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheOperator> <缓存加载：Operator end> 
2017-10-10 13:03:35.426 [] [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheDict> <缓存加载：Dict start> 
2017-10-10 13:03:35.427 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_dict  
 > 
2017-10-10 13:03:35.429 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:03:35.438 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.440 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:03:35.454 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.563 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:03:35.568 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.569 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:35.576 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.582 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:35.590 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.591 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:03:35.597 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.603 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:03:35.621 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.622 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:03:35.627 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.628 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:03:35.637 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.637 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 13:03:35.676 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.685 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 13:03:35.709 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.709 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:03:35.717 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.718 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:03:35.723 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.724 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 13:03:35.730 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.731 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 13:03:35.736 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.737 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:03:35.742 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.744 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:03:35.752 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.753 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:03:35.765 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.766 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:03:35.772 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.772 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:35.779 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.780 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:35.787 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.788 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 13:03:35.794 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.796 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 13:03:35.802 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.803 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:03:35.809 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.810 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:03:35.817 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.818 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 13:03:35.823 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.824 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 13:03:35.829 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.829 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:03:35.835 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.836 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:03:35.842 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.843 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:03:35.848 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.849 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:03:35.855 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.857 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:35.862 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.863 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:35.870 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.871 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:03:35.878 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.879 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:03:35.914 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.915 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:03:35.970 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:35.971 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:03:35.998 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:35.999 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:03:36.005 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.006 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:03:36.012 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.013 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.018 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.020 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.027 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.028 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:03:36.034 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.035 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:03:36.041 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.042 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.048 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.049 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.056 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.056 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.062 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.063 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.069 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.070 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:36.075 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.076 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:36.095 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.096 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:36.109 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.110 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:36.118 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.118 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:03:36.136 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.137 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:03:36.153 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.154 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:03:36.160 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.163 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:03:36.177 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.179 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 13:03:36.185 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.186 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 13:03:36.192 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.193 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:03:36.208 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.210 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:03:36.216 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.217 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 13:03:36.222 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.223 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 13:03:36.228 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.229 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:03:36.234 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.236 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:03:36.242 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.243 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 13:03:36.249 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.250 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 13:03:36.256 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.256 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:03:36.261 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.262 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:03:36.267 [] [] [] INFO [main] <ParamInitPlugin.java [261] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2017-10-10 13:03:36.267 [] [] [] INFO [main] <ParamInitPlugin.java [270] - platform_cacheParam> <缓存加载：Param start> 
2017-10-10 13:03:36.269 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_param  
 > 
2017-10-10 13:03:36.270 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:03:36.276 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.277 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:03:36.282 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.283 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:03:36.292 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.293 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.325 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.326 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.358 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.359 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:03:36.365 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.367 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:03:36.377 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.378 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.385 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.386 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.399 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.400 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:03:36.436 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.441 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:03:36.446 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.447 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.451 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.452 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.457 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.458 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.463 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.464 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:03:36.469 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.469 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:36.474 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.475 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:36.479 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:03:36.480 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:36.484 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:03:36.485 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:03:36.490 [] [] [] INFO [main] <ParamInitPlugin.java [277] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2017-10-10 13:03:36.490 [] [] [] INFO [main] <ParamInitPlugin.java [99] - start> <缓存参数初始化 end ...> 
2017-10-10 13:03:36.490 [] [] [] INFO [main] <Run.java [154] - <clinit>> <configPlugin FileRenamePlugin 配置文件上传命名策略插件> 
2017-10-10 13:03:36.546 [] [] [] INFO [main] <Run.java [157] - <clinit>> <configPlugin QuartzPlugin 配置Quartz插件> 
2017-10-10 13:03:37.102 [] [] [] INFO [main] <? [?] - ?> <using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter> 
2017-10-10 13:03:38.433 [] [] [] INFO [main] <Main.java [58] - main> < [DUBBO] Use container type([spring]) to run dubbo serivce., dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:54.012 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:54.811 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:55.724 [] [] [] INFO [main] <ServiceBean.java [108] - onApplicationEvent> < [DUBBO] The service ready on spring started. service: com.ludateam.wechat.api.MessageService, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.297 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.339 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.376 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.415 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.415 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=22500&serialization=kryo&side=provider&timestamp=1507611835944, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.416 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.MessageService url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=22500&serialization=kryo&side=provider&timestamp=1507611835944 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=22500&registry=zookeeper&timestamp=1507611835772, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.536 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.615 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.765 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:57.974 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:03:58.000 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:04:08.142 [] [] [] INFO [main] <AbstractServer.java [70] - <init>> < [DUBBO] Start NettyServer bind /0.0.0.0:20990, export /169.254.148.248:20990, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:04:08.187 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:04:08.304 [] [] [] INFO [main] <AbstractRegistry.java [232] - loadProperties> < [DUBBO] Load registry store file C:\Users\lenovo\.dubbo\dubbo-registry-127.0.0.1.cache, data: {com.ludateam.wechat.api.UserService=empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=configurators&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949 empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=routers&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949 empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=providers&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949, com.alibaba.dubbo.demo.user.facade.AnotherUserRestService=empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=configurators&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722 empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=routers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722 empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=providers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722, annotationConfig/net.aimeizi.student.StudentRestService=empty://169.254.148.248:20880/net.aimeizi.student.StudentRestService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&group=annotationConfig&interface=net.aimeizi.student.StudentRestService&iothreads=10&methods=registerStudent,getStudent&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&side=provider&threads=500&timestamp=1502851536396&validation=true, net.aimeizi.student.StudentRestService=empty://169.254.148.248:8000/services/net.aimeizi.student.StudentRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.student.StudentRestService&methods=registerStudent,getStudent&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&side=provider&threads=500&timestamp=1502851539792&validation=true, com.ludateam.wechat.api.MessageService=empty://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=13192&serialization=kryo&server=tomcat&side=provider&timestamp=1505099515364, com.ludateam.wechat.api.CallService=empty://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=13192&serialization=kryo&server=tomcat&side=provider&timestamp=1505099520226, com.alibaba.dubbo.monitor.MonitorService=empty://169.254.56.102:7070/com.alibaba.dubbo.monitor.MonitorService?anyhost=true&application=simple-monitor&category=configurators&check=false&delay=-1&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.monitor.MonitorService&methods=lookup,collect&pid=27800&side=provider&timestamp=1461831883967, */com.alibaba.dubbo.demo.bid.BidService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.bid.BidService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.bid.BidService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.bid.BidService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.bid.BidService&version=*, com.alibaba.dubbo.demo.user.facade.UserRestService=empty://169.254.148.248:8888/services/com.alibaba.dubbo.demo.user.facade.UserRestService?accepts=500&anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&extension=com.alibaba.dubbo.demo.extension.TraceInterceptor,                     com.alibaba.dubbo.demo.extension.TraceFilter,                     com.alibaba.dubbo.demo.extension.ClientTraceFilter,                     com.alibaba.dubbo.demo.extension.DynamicTraceBinding,                     com.alibaba.dubbo.demo.extension.CustomExceptionMapper,                     com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter&generic=false&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=12408&server=tomcat&side=provider&threads=500&timestamp=1502787141475&validation=true, net.aimeizi.order.OrderService$Iface=empty://169.254.148.248:33201/net.aimeizi.order.OrderService$Iface?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.order.OrderService$Iface&methods=ping,getOrder&organization=dubbo&owner=aimeizi&pid=38176&service.filter=serviceFilter&side=provider&timeout=10000&timestamp=1502851538967, */com.alibaba.dubbo.monitor.MonitorService:*=empty://169.254.56.102/com.alibaba.dubbo.monitor.MonitorService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.monitor.MonitorService&version=* dubbo://169.254.56.102:7070/com.alibaba.dubbo.monitor.MonitorService?anyhost=true&application=simple-monitor&delay=-1&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.monitor.MonitorService&methods=lookup,collect&pid=27800&side=provider&timestamp=1461831883967, com.alibaba.dubbo.demo.bid.BidService=empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=configurators&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666 empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=routers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666 empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=providers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666, annotationConfig/com.alibaba.dubbo.demo.user.facade.UserRestService=empty://169.254.148.248:20880/com.alibaba.dubbo.demo.user.facade.UserRestService?anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&generic=false&group=annotationConfig&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&methods=getUser,registerUser&optimizer=com.alibaba.dubbo.demo.SerializationOptimizerImpl&organization=dubbox&owner=programmer&pid=12408&serialization=kryo&side=provider&timestamp=1502787139393&validation=true, net.aimeizi.user.UserService=empty://169.254.148.248:20880/net.aimeizi.user.UserService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.user.UserService&iothreads=10&methods=getUserById,updatePassword,ping,registerUser,deleteUserById&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&service.filter=serviceFilter&side=provider&threads=500&timeout=10000&timestamp=1502851538055, xmlConfig/com.alibaba.dubbo.demo.user.UserService=empty://169.254.148.248:20880/com.alibaba.dubbo.demo.user.UserService?anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&generic=false&group=xmlConfig&interface=com.alibaba.dubbo.demo.user.UserService&methods=getUser,registerUser&optimizer=com.alibaba.dubbo.demo.SerializationOptimizerImpl&organization=dubbox&owner=programmer&pid=12408&serialization=kryo&side=provider&timestamp=1502787140960, net.aimeizi.student.AnotherStudentRestService=empty://169.254.148.248:8000/services/net.aimeizi.student.AnotherStudentRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&connections=100&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.student.AnotherStudentRestService&methods=registerStudent,getStudent&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&side=provider&threads=500&timeout=2000&timestamp=1502851540247&validation=true, */com.alibaba.dubbo.demo.user.facade.AnotherUserRestService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&version=*, com.yingjun.dubbox.api.UserService=empty://169.254.148.248:9009/com.yingjun.dubbox.api.UserService?anyhost=true&application=provider&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=5000&dubbo=2.8.4&extension=com.yingjun.dubbox.services.ControllFilter&generic=false&interface=com.yingjun.dubbox.api.UserService&methods=getUserByName,getUserByPhone&owner=yingjun&pid=9444&revision=1.0.0&serialization=kryo&server=tomcat&side=provider&timestamp=1502937435746, */com.alibaba.dubbo.demo.user.facade.UserRestService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.UserRestService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.UserRestService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&version=*, net.aimeizi.person.PersonService=empty://169.254.148.248:40001/net.aimeizi.person.PersonService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.person.PersonService&methods=ping,getPersonList&organization=dubbo&owner=aimeizi&pid=38176&service.filter=serviceFilter&side=provider&timeout=10000&timestamp=1502851537384, xmlConfig/net.aimeizi.student.StudentService=empty://169.254.148.248:20880/net.aimeizi.student.StudentService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&group=xmlConfig&interface=net.aimeizi.student.StudentService&iothreads=10&methods=registerStudent,getStudent&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&side=provider&threads=500&timestamp=1502851539409, */com.alibaba.dubbo.demo.user.UserService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.UserService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.UserService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.UserService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.UserService&version=*, net.aimeizi.user.UserRestService=empty://169.254.148.248:8000/services/net.aimeizi.user.UserRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&connections=100&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.user.UserRestService&methods=getUserById,updatePassword,post,ping,get,registerUser,deleteUserById&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&service.filter=serviceFilter&side=provider&threads=500&timeout=10000&timestamp=1502851538560&validation=true}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:04:09.567 [] [] [] WARN [main-SendThread(127.0.0.1:2181)] <ClientCnxn.java [1102] - run> <Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect> 
java.net.ConnectException: Connection refused: no further information
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081)
2017-10-10 13:04:11.686 [] [] [] WARN [main-SendThread(127.0.0.1:2181)] <ClientCnxn.java [1102] - run> <Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect> 
java.net.ConnectException: Connection refused: no further information
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081)
2017-10-10 13:04:13.917 [] [] [] ERROR [main] <Main.java [86] - main> < [DUBBO] Unable to connect to zookeeper server within timeout: 5000, dubbo version: 2.8.4, current host: 127.0.0.1> 
org.I0Itec.zkclient.exception.ZkTimeoutException: Unable to connect to zookeeper server within timeout: 5000
	at org.I0Itec.zkclient.ZkClient.connect(ZkClient.java:1232)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:156)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:130)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:126)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:93)
	at com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkclientZookeeperClient.<init>(ZkclientZookeeperClient.java:29)
	at com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkclientZookeeperTransporter.connect(ZkclientZookeeperTransporter.java:10)
	at com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter$Adpative.connect(ZookeeperTransporter$Adpative.java)
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.<init>(ZookeeperRegistry.java:69)
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistryFactory.createRegistry(ZookeeperRegistryFactory.java:37)
	at com.alibaba.dubbo.registry.support.AbstractRegistryFactory.getRegistry(AbstractRegistryFactory.java:94)
	at com.alibaba.dubbo.registry.RegistryFactory$Adpative.getRegistry(RegistryFactory$Adpative.java)
	at com.alibaba.dubbo.registry.integration.RegistryProtocol.getRegistry(RegistryProtocol.java:190)
	at com.alibaba.dubbo.registry.integration.RegistryProtocol.export(RegistryProtocol.java:109)
	at com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:54)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:53)
	at com.alibaba.dubbo.rpc.Protocol$Adpative.export(Protocol$Adpative.java)
	at com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:489)
	at com.alibaba.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:285)
	at com.alibaba.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:246)
	at com.alibaba.dubbo.config.ServiceConfig.export(ServiceConfig.java:145)
	at com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:110)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:380)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:850)
	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:540)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.alibaba.dubbo.container.spring.SpringContainer.start(SpringContainer.java:50)
	at com.alibaba.dubbo.container.Main.main(Main.java:80)
	at com.ludateam.wechat.Run.main(Run.java:168)
2017-10-10 13:04:13.977 [] [] [] INFO [DubboShutdownHook] <AbstractConfig.java [450] - run> < [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:04:13.984 [] [] [] INFO [DubboShutdownHook] <AbstractRegistryFactory.java [63] - destroyAll> < [DUBBO] Close all registries [], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:04:13.984 [] [] [] INFO [DubboShutdownHook] <DubboProtocol.java [439] - destroy> < [DUBBO] Close dubbo server: /169.254.148.248:20990, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:04:13.985 [] [] [] INFO [DubboShutdownHook] <AbstractServer.java [147] - close> < [DUBBO] Close NettyServer bind /0.0.0.0:20990, export /169.254.148.248:20990, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:04:14.028 [] [] [] INFO [DubboShutdownHook] <AbstractProtocol.java [76] - destroy> < [DUBBO] Unexport service: dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=22500&serialization=kryo&side=provider&timestamp=1507611835944, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:04:14.029 [] [] [] INFO [DubboShutdownHook] <AbstractProtocol.java [76] - destroy> < [DUBBO] Unexport service: injvm://127.0.0.1/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=22500&serialization=kryo&side=provider&timestamp=1507611835944, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:22:39.383 [] [] [] INFO [main] <Run.java [55] - <clinit>> <configConstant 视图Beetl设置> 
2017-10-10 13:22:40.148 [] [] [] DEBUG [main] <ToolBeetl.java [45] - regiseter> <注册全局web视图模板解析> 
2017-10-10 13:22:40.252 [] [] [] DEBUG [main] <ToolBeetl.java [62] - regiseter> <注册全局BeetlKit模板解析> 
2017-10-10 13:22:40.269 [] [] [] INFO [main] <Run.java [60] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-10-10 13:22:40.270 [] [] [] INFO [main] <Run.java [67] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-10-10 13:22:40.281 [] [] [] INFO [main] <Run.java [70] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-10-10 13:22:40.282 [] [] [] INFO [main] <Run.java [73] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-10-10 13:22:40.843 [] [] [] INFO [main] <Run.java [82] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-10-10 13:22:45.484 [] [] [] INFO [main] <Run.java [94] - <clinit>> <configPlugin 数据库类型判断> 
2017-10-10 13:22:45.484 [] [] [] INFO [main] <Run.java [100] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-10-10 13:22:45.485 [] [] [] INFO [main] <Run.java [118] - <clinit>> <configPlugin 表自动扫描注册> 
2017-10-10 13:22:46.152 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-10-10 13:22:46.154 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-10-10 13:22:46.154 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-10-10 13:22:46.155 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-10-10 13:22:46.155 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-10-10 13:22:46.157 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-10-10 13:22:46.158 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-10-10 13:22:46.158 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-10-10 13:22:46.159 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-10-10 13:22:46.159 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-10-10 13:22:46.160 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-10-10 13:22:46.160 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-10-10 13:22:46.161 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-10-10 13:22:46.161 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-10-10 13:22:46.162 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-10-10 13:22:46.162 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-10-10 13:22:46.163 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-10-10 13:22:46.164 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-10-10 13:22:46.164 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-10-10 13:22:46.164 [] [] [] INFO [main] <Run.java [121] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-10-10 13:22:46.883 [] [] [] INFO [main] <Run.java [124] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-10-10 13:23:13.323 [] [] [] INFO [main] <Run.java [55] - <clinit>> <configConstant 视图Beetl设置> 
2017-10-10 13:23:13.655 [] [] [] DEBUG [main] <ToolBeetl.java [45] - regiseter> <注册全局web视图模板解析> 
2017-10-10 13:23:13.682 [] [] [] DEBUG [main] <ToolBeetl.java [62] - regiseter> <注册全局BeetlKit模板解析> 
2017-10-10 13:23:13.698 [] [] [] INFO [main] <Run.java [60] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-10-10 13:23:13.699 [] [] [] INFO [main] <Run.java [67] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-10-10 13:23:13.714 [] [] [] INFO [main] <Run.java [70] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-10-10 13:23:13.715 [] [] [] INFO [main] <Run.java [73] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-10-10 13:23:13.805 [] [] [] INFO [main] <Run.java [82] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-10-10 13:23:14.172 [] [] [] INFO [main] <Run.java [94] - <clinit>> <configPlugin 数据库类型判断> 
2017-10-10 13:23:14.176 [] [] [] INFO [main] <Run.java [100] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-10-10 13:23:14.177 [] [] [] INFO [main] <Run.java [118] - <clinit>> <configPlugin 表自动扫描注册> 
2017-10-10 13:23:14.578 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-10-10 13:23:14.579 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-10-10 13:23:14.580 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-10-10 13:23:14.581 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-10-10 13:23:14.582 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-10-10 13:23:14.584 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-10-10 13:23:14.585 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-10-10 13:23:14.586 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-10-10 13:23:14.587 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-10-10 13:23:14.587 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-10-10 13:23:14.588 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-10-10 13:23:14.588 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-10-10 13:23:14.589 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-10-10 13:23:14.590 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-10-10 13:23:14.590 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-10-10 13:23:14.591 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-10-10 13:23:14.591 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-10-10 13:23:14.592 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-10-10 13:23:14.596 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-10-10 13:23:14.596 [] [] [] INFO [main] <Run.java [121] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-10-10 13:23:14.655 [] [] [] INFO [main] <Run.java [124] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-10-10 13:23:44.317 [] [] [] INFO [main] <Run.java [128] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-10-10 13:23:44.340 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-10-10 13:23:44.342 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-10-10 13:23:44.348 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-10-10 13:23:44.350 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-10-10 13:23:44.351 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-10-10 13:23:44.352 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-10-10 13:23:44.354 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-10-10 13:23:44.355 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-10-10 13:23:44.356 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-10-10 13:23:44.358 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-10-10 13:23:44.363 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-10-10 13:23:44.370 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-10-10 13:23:44.371 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-10-10 13:23:44.404 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-10-10 13:23:44.406 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-10-10 13:23:44.407 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-10-10 13:23:44.409 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-10-10 13:23:44.410 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-10-10 13:23:44.412 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-10-10 13:23:44.413 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-10-10 13:23:44.415 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-10-10 13:23:44.416 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-10-10 13:23:44.421 [] [] [] INFO [main] <Run.java [131] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-10-10 13:23:44.424 [] [] [] INFO [main] <Run.java [135] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-10-10 13:23:45.855 [] [] [] INFO [main] <Run.java [148] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-10-10 13:23:46.180 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-10-10 13:23:46.181 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-10-10 13:23:46.182 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-10-10 13:23:46.182 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-10-10 13:23:46.183 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-10-10 13:23:46.184 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-10-10 13:23:46.188 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-10-10 13:23:46.189 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-10-10 13:23:46.193 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-10-10 13:23:46.195 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-10-10 13:23:46.196 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-10-10 13:23:46.200 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-10-10 13:23:46.201 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-10-10 13:23:46.206 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-10-10 13:23:46.208 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-10-10 13:23:46.209 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-10-10 13:23:46.256 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-10-10 13:23:46.257 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-10-10 13:23:46.270 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-10-10 13:23:46.274 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-10-10 13:23:46.280 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-10-10 13:23:46.280 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-10-10 13:23:46.285 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-10-10 13:23:46.289 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-10-10 13:23:46.302 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-10-10 13:23:46.303 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-10-10 13:23:46.304 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-10-10 13:23:46.304 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-10-10 13:23:46.305 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-10-10 13:23:46.305 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 13:23:46.306 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-10-10 13:23:46.307 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-10-10 13:23:46.307 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:23:46.308 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:23:46.309 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-10-10 13:23:46.309 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 13:23:46.310 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-10-10 13:23:46.315 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:23:46.336 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 13:23:46.337 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-10-10 13:23:46.343 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-10-10 13:23:46.344 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-10-10 13:23:46.344 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-10-10 13:23:46.345 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-10-10 13:23:46.346 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-10-10 13:23:46.346 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 13:23:46.360 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:23:46.361 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-10-10 13:23:46.362 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:23:46.363 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-10-10 13:23:46.363 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-10-10 13:23:46.364 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-10-10 13:23:46.365 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-10-10 13:23:46.365 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-10-10 13:23:46.366 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-10-10 13:23:46.367 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-10-10 13:23:46.372 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-10-10 13:23:46.373 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 13:23:46.401 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 13:23:46.402 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-10-10 13:23:46.402 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-10-10 13:23:46.409 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:23:46.411 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 13:23:46.412 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 13:23:46.412 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-10-10 13:23:46.413 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-10-10 13:23:46.413 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-10-10 13:23:46.414 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-10-10 13:23:46.415 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-10-10 13:23:46.422 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-10-10 13:23:46.423 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-10-10 13:23:46.424 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-10-10 13:23:46.424 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-10-10 13:23:46.425 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-10-10 13:23:46.425 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 13:23:46.426 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-10-10 13:23:46.427 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-10-10 13:23:46.427 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:23:46.428 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:23:46.428 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-10-10 13:23:46.429 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 13:23:46.429 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-10-10 13:23:46.439 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-10-10 13:23:46.440 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-10-10 13:23:46.446 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-10-10 13:23:46.447 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-10-10 13:23:46.448 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-10-10 13:23:46.448 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 13:23:46.449 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-10-10 13:23:46.450 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-10-10 13:23:46.477 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:23:46.478 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 13:23:46.479 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-10-10 13:23:46.480 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 13:23:46.481 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:23:46.482 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-10-10 13:23:46.482 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-10-10 13:23:46.483 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-10-10 13:23:46.488 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:23:46.489 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-10-10 13:23:46.490 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-10-10 13:23:46.491 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-10-10 13:23:46.498 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:23:46.499 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 13:23:46.524 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-10-10 13:23:46.525 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:23:46.525 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-10-10 13:23:46.526 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-10-10 13:23:46.532 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-10-10 13:23:46.533 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-10-10 13:23:46.533 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-10-10 13:23:46.534 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-10-10 13:23:46.535 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-10-10 13:23:46.539 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-10-10 13:23:46.539 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-10-10 13:23:46.543 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-10-10 13:23:46.548 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-10-10 13:23:46.549 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-10-10 13:23:46.556 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:23:46.557 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-10-10 13:23:46.557 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-10-10 13:23:46.558 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-10-10 13:23:46.559 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-10-10 13:23:46.559 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-10-10 13:23:46.562 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-10-10 13:23:46.566 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:23:46.572 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-10-10 13:23:46.573 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-10-10 13:23:46.573 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-10-10 13:23:46.574 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-10-10 13:23:46.574 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-10-10 13:23:46.575 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-10-10 13:23:46.576 [] [] [] INFO [main] <Run.java [151] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-10-10 13:23:46.988 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-10-10 13:23:49.775 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-10-10 13:23:49.784 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:23:50.322 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-10-10 13:23:50.364 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:23:50.383 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_user 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:23:50.398 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:23:50.411 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:50.425 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 13:23:50.432 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 13:23:50.434 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 13:23:50.466 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:50.467 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 13:23:50.475 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 13:23:50.476 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 13:23:50.490 [] [] [] INFO [main] <ParamInitPlugin.java [139] - platform_cacheUser> <缓存加载：User end> 
2017-10-10 13:23:50.491 [] [] [] INFO [main] <ParamInitPlugin.java [147] - platform_cacheGroupOperator> <缓存加载：Group Operator start> 
2017-10-10 13:23:50.491 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:23:50.520 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_group  
 > 
2017-10-10 13:23:50.522 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:23:50.549 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_group 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:23:50.550 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:23:50.557 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_roleoperator ro 
            on ro.operatorids = o.ids 
    left join
        pt_grouprole gr 
            on gr.roleids = ro.roleids 
    where
        gr.groupids = ?  
 > 
2017-10-10 13:23:50.564 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 13:23:50.590 [] [] [] INFO [main] <ParamInitPlugin.java [173] - platform_cacheGroupOperator> <缓存加载：Group Operator end> 
2017-10-10 13:23:50.591 [] [] [] INFO [main] <ParamInitPlugin.java [181] - platform_cacheStationOperator> <缓存加载：Station Operator start> 
2017-10-10 13:23:50.591 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:23:50.605 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_station  
 > 
2017-10-10 13:23:50.614 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:23:50.619 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_station 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:23:50.620 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:23:50.625 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:23:50.627 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:50.631 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:23:50.632 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0021 
 > 
2017-10-10 13:23:50.636 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:23:50.637 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0022 
 > 
2017-10-10 13:23:50.641 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:23:50.642 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0023 
 > 
2017-10-10 13:23:50.646 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:23:50.648 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0024 
 > 
2017-10-10 13:23:50.656 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:23:50.657 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0025 
 > 
2017-10-10 13:23:50.662 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:23:50.663 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0026 
 > 
2017-10-10 13:23:50.684 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:23:50.684 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0027 
 > 
2017-10-10 13:23:50.702 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:23:50.702 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 13:23:50.708 [] [] [] INFO [main] <ParamInitPlugin.java [207] - platform_cacheStationOperator> <缓存加载：Station Operator end> 
2017-10-10 13:23:50.708 [] [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheOperator> <缓存加载：Operator start> 
2017-10-10 13:23:50.708 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:23:50.721 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_operator  
 > 
2017-10-10 13:23:50.722 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:23:50.730 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_operator 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:23:50.731 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:23:50.889 [] [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheOperator> <缓存加载：Operator end> 
2017-10-10 13:23:50.889 [] [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheDict> <缓存加载：Dict start> 
2017-10-10 13:23:50.891 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_dict  
 > 
2017-10-10 13:23:50.893 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:23:50.912 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:50.913 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:23:50.922 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.070 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:23:51.077 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.078 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.082 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.083 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.087 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.087 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:23:51.091 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.092 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:23:51.096 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.097 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:23:51.101 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.102 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:23:51.106 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.107 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 13:23:51.111 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.112 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 13:23:51.116 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.117 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:23:51.121 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.122 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:23:51.126 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.127 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 13:23:51.142 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.143 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 13:23:51.173 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.174 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:23:51.186 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.187 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:23:51.196 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.197 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:23:51.208 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.212 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:23:51.220 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.221 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.226 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.227 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.232 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.232 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 13:23:51.236 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.237 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 13:23:51.241 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.241 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:23:51.246 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.247 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:23:51.251 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.252 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 13:23:51.255 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.256 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 13:23:51.271 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.272 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:23:51.276 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.277 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:23:51.282 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.282 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:23:51.305 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.306 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:23:51.311 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.312 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.316 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.317 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.328 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.329 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:23:51.359 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.361 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:23:51.370 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.371 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:23:51.382 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.384 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:23:51.421 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.422 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:23:51.427 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.428 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:23:51.432 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.432 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.436 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.437 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.442 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.443 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:23:51.447 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.448 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:23:51.452 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.453 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.457 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.458 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.462 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.463 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.467 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.468 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.496 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.497 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.537 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.538 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.570 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.580 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.584 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.585 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.592 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.593 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:23:51.616 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.617 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:23:51.644 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.645 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:23:51.656 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.657 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:23:51.663 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.664 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 13:23:51.688 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.689 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 13:23:51.693 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.694 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:23:51.697 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.698 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:23:51.704 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.705 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 13:23:51.710 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.711 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 13:23:51.716 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.716 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:23:51.720 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.721 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:23:51.725 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.726 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 13:23:51.730 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.731 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 13:23:51.735 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.736 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:23:51.740 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.741 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:23:51.746 [] [] [] INFO [main] <ParamInitPlugin.java [261] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2017-10-10 13:23:51.746 [] [] [] INFO [main] <ParamInitPlugin.java [270] - platform_cacheParam> <缓存加载：Param start> 
2017-10-10 13:23:51.748 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_param  
 > 
2017-10-10 13:23:51.749 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:23:51.755 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.757 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:23:51.764 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.765 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:23:51.772 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.772 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.776 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.777 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.795 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.796 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:23:51.801 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.803 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:23:51.807 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.807 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.811 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.812 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.818 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.819 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:23:51.822 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.824 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:23:51.829 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.830 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.834 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.838 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.843 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.845 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.848 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.850 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:23:51.854 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.854 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.858 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.859 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.863 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:23:51.863 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.867 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:23:51.868 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:23:51.871 [] [] [] INFO [main] <ParamInitPlugin.java [277] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2017-10-10 13:23:51.871 [] [] [] INFO [main] <ParamInitPlugin.java [99] - start> <缓存参数初始化 end ...> 
2017-10-10 13:23:51.872 [] [] [] INFO [main] <Run.java [154] - <clinit>> <configPlugin FileRenamePlugin 配置文件上传命名策略插件> 
2017-10-10 13:23:51.892 [] [] [] INFO [main] <Run.java [157] - <clinit>> <configPlugin QuartzPlugin 配置Quartz插件> 
2017-10-10 13:23:52.134 [] [] [] INFO [main] <? [?] - ?> <using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter> 
2017-10-10 13:23:52.647 [] [] [] INFO [main] <Main.java [58] - main> < [DUBBO] Use container type([spring]) to run dubbo serivce., dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:58.162 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:58.526 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:58.723 [] [] [] INFO [main] <ServiceBean.java [108] - onApplicationEvent> < [DUBBO] The service ready on spring started. service: com.ludateam.wechat.api.MessageService, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:58.969 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:58.991 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.012 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.034 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.035 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=25208&serialization=kryo&side=provider&timestamp=1507613038745, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.036 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.MessageService url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=25208&serialization=kryo&side=provider&timestamp=1507613038745 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=25208&registry=zookeeper&timestamp=1507613038732, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.048 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.072 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.124 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.195 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.211 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.846 [] [] [] INFO [main] <AbstractServer.java [70] - <init>> < [DUBBO] Start NettyServer bind /0.0.0.0:20990, export /169.254.148.248:20990, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.855 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:23:59.912 [] [] [] INFO [main] <AbstractRegistry.java [232] - loadProperties> < [DUBBO] Load registry store file C:\Users\lenovo\.dubbo\dubbo-registry-127.0.0.1.cache, data: {com.ludateam.wechat.api.UserService=empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=configurators&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949 empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=routers&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949 empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=providers&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949, com.alibaba.dubbo.demo.user.facade.AnotherUserRestService=empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=configurators&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722 empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=routers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722 empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=providers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722, annotationConfig/net.aimeizi.student.StudentRestService=empty://169.254.148.248:20880/net.aimeizi.student.StudentRestService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&group=annotationConfig&interface=net.aimeizi.student.StudentRestService&iothreads=10&methods=registerStudent,getStudent&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&side=provider&threads=500&timestamp=1502851536396&validation=true, net.aimeizi.student.StudentRestService=empty://169.254.148.248:8000/services/net.aimeizi.student.StudentRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.student.StudentRestService&methods=registerStudent,getStudent&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&side=provider&threads=500&timestamp=1502851539792&validation=true, com.ludateam.wechat.api.MessageService=empty://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=13192&serialization=kryo&server=tomcat&side=provider&timestamp=1505099515364, com.ludateam.wechat.api.CallService=empty://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=13192&serialization=kryo&server=tomcat&side=provider&timestamp=1505099520226, com.alibaba.dubbo.monitor.MonitorService=empty://169.254.56.102:7070/com.alibaba.dubbo.monitor.MonitorService?anyhost=true&application=simple-monitor&category=configurators&check=false&delay=-1&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.monitor.MonitorService&methods=lookup,collect&pid=27800&side=provider&timestamp=1461831883967, */com.alibaba.dubbo.demo.bid.BidService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.bid.BidService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.bid.BidService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.bid.BidService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.bid.BidService&version=*, com.alibaba.dubbo.demo.user.facade.UserRestService=empty://169.254.148.248:8888/services/com.alibaba.dubbo.demo.user.facade.UserRestService?accepts=500&anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&extension=com.alibaba.dubbo.demo.extension.TraceInterceptor,                     com.alibaba.dubbo.demo.extension.TraceFilter,                     com.alibaba.dubbo.demo.extension.ClientTraceFilter,                     com.alibaba.dubbo.demo.extension.DynamicTraceBinding,                     com.alibaba.dubbo.demo.extension.CustomExceptionMapper,                     com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter&generic=false&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=12408&server=tomcat&side=provider&threads=500&timestamp=1502787141475&validation=true, net.aimeizi.order.OrderService$Iface=empty://169.254.148.248:33201/net.aimeizi.order.OrderService$Iface?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.order.OrderService$Iface&methods=ping,getOrder&organization=dubbo&owner=aimeizi&pid=38176&service.filter=serviceFilter&side=provider&timeout=10000&timestamp=1502851538967, */com.alibaba.dubbo.monitor.MonitorService:*=empty://169.254.56.102/com.alibaba.dubbo.monitor.MonitorService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.monitor.MonitorService&version=* dubbo://169.254.56.102:7070/com.alibaba.dubbo.monitor.MonitorService?anyhost=true&application=simple-monitor&delay=-1&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.monitor.MonitorService&methods=lookup,collect&pid=27800&side=provider&timestamp=1461831883967, com.alibaba.dubbo.demo.bid.BidService=empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=configurators&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666 empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=routers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666 empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=providers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666, annotationConfig/com.alibaba.dubbo.demo.user.facade.UserRestService=empty://169.254.148.248:20880/com.alibaba.dubbo.demo.user.facade.UserRestService?anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&generic=false&group=annotationConfig&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&methods=getUser,registerUser&optimizer=com.alibaba.dubbo.demo.SerializationOptimizerImpl&organization=dubbox&owner=programmer&pid=12408&serialization=kryo&side=provider&timestamp=1502787139393&validation=true, net.aimeizi.user.UserService=empty://169.254.148.248:20880/net.aimeizi.user.UserService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.user.UserService&iothreads=10&methods=getUserById,updatePassword,ping,registerUser,deleteUserById&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&service.filter=serviceFilter&side=provider&threads=500&timeout=10000&timestamp=1502851538055, xmlConfig/com.alibaba.dubbo.demo.user.UserService=empty://169.254.148.248:20880/com.alibaba.dubbo.demo.user.UserService?anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&generic=false&group=xmlConfig&interface=com.alibaba.dubbo.demo.user.UserService&methods=getUser,registerUser&optimizer=com.alibaba.dubbo.demo.SerializationOptimizerImpl&organization=dubbox&owner=programmer&pid=12408&serialization=kryo&side=provider&timestamp=1502787140960, net.aimeizi.student.AnotherStudentRestService=empty://169.254.148.248:8000/services/net.aimeizi.student.AnotherStudentRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&connections=100&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.student.AnotherStudentRestService&methods=registerStudent,getStudent&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&side=provider&threads=500&timeout=2000&timestamp=1502851540247&validation=true, */com.alibaba.dubbo.demo.user.facade.AnotherUserRestService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&version=*, com.yingjun.dubbox.api.UserService=empty://169.254.148.248:9009/com.yingjun.dubbox.api.UserService?anyhost=true&application=provider&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=5000&dubbo=2.8.4&extension=com.yingjun.dubbox.services.ControllFilter&generic=false&interface=com.yingjun.dubbox.api.UserService&methods=getUserByName,getUserByPhone&owner=yingjun&pid=9444&revision=1.0.0&serialization=kryo&server=tomcat&side=provider&timestamp=1502937435746, */com.alibaba.dubbo.demo.user.facade.UserRestService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.UserRestService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.UserRestService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&version=*, net.aimeizi.person.PersonService=empty://169.254.148.248:40001/net.aimeizi.person.PersonService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.person.PersonService&methods=ping,getPersonList&organization=dubbo&owner=aimeizi&pid=38176&service.filter=serviceFilter&side=provider&timeout=10000&timestamp=1502851537384, xmlConfig/net.aimeizi.student.StudentService=empty://169.254.148.248:20880/net.aimeizi.student.StudentService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&group=xmlConfig&interface=net.aimeizi.student.StudentService&iothreads=10&methods=registerStudent,getStudent&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&side=provider&threads=500&timestamp=1502851539409, */com.alibaba.dubbo.demo.user.UserService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.UserService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.UserService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.UserService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.UserService&version=*, net.aimeizi.user.UserRestService=empty://169.254.148.248:8000/services/net.aimeizi.user.UserRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&connections=100&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.user.UserRestService&methods=getUserById,updatePassword,post,ping,get,registerUser,deleteUserById&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&service.filter=serviceFilter&side=provider&threads=500&timeout=10000&timestamp=1502851538560&validation=true}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:24:01.353 [] [] [] WARN [main-SendThread(127.0.0.1:2181)] <ClientCnxn.java [1102] - run> <Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect> 
java.net.ConnectException: Connection refused: no further information
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081)
2017-10-10 13:24:03.474 [] [] [] WARN [main-SendThread(127.0.0.1:2181)] <ClientCnxn.java [1102] - run> <Session 0x0 for server null, unexpected error, closing socket connection and attempting reconnect> 
java.net.ConnectException: Connection refused: no further information
	at sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)
	at sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)
	at org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)
	at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1081)
2017-10-10 13:24:05.689 [] [] [] ERROR [main] <Main.java [86] - main> < [DUBBO] Unable to connect to zookeeper server within timeout: 5000, dubbo version: 2.8.4, current host: 127.0.0.1> 
org.I0Itec.zkclient.exception.ZkTimeoutException: Unable to connect to zookeeper server within timeout: 5000
	at org.I0Itec.zkclient.ZkClient.connect(ZkClient.java:1232)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:156)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:130)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:126)
	at org.I0Itec.zkclient.ZkClient.<init>(ZkClient.java:93)
	at com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkclientZookeeperClient.<init>(ZkclientZookeeperClient.java:29)
	at com.alibaba.dubbo.remoting.zookeeper.zkclient.ZkclientZookeeperTransporter.connect(ZkclientZookeeperTransporter.java:10)
	at com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter$Adpative.connect(ZookeeperTransporter$Adpative.java)
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry.<init>(ZookeeperRegistry.java:69)
	at com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistryFactory.createRegistry(ZookeeperRegistryFactory.java:37)
	at com.alibaba.dubbo.registry.support.AbstractRegistryFactory.getRegistry(AbstractRegistryFactory.java:94)
	at com.alibaba.dubbo.registry.RegistryFactory$Adpative.getRegistry(RegistryFactory$Adpative.java)
	at com.alibaba.dubbo.registry.integration.RegistryProtocol.getRegistry(RegistryProtocol.java:190)
	at com.alibaba.dubbo.registry.integration.RegistryProtocol.export(RegistryProtocol.java:109)
	at com.alibaba.dubbo.rpc.protocol.ProtocolListenerWrapper.export(ProtocolListenerWrapper.java:54)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper.export(ProtocolFilterWrapper.java:53)
	at com.alibaba.dubbo.rpc.Protocol$Adpative.export(Protocol$Adpative.java)
	at com.alibaba.dubbo.config.ServiceConfig.doExportUrlsFor1Protocol(ServiceConfig.java:489)
	at com.alibaba.dubbo.config.ServiceConfig.doExportUrls(ServiceConfig.java:285)
	at com.alibaba.dubbo.config.ServiceConfig.doExport(ServiceConfig.java:246)
	at com.alibaba.dubbo.config.ServiceConfig.export(ServiceConfig.java:145)
	at com.alibaba.dubbo.config.spring.ServiceBean.onApplicationEvent(ServiceBean.java:110)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:163)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:136)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:380)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:850)
	at org.springframework.context.support.AbstractApplicationContext.__refresh(AbstractApplicationContext.java:540)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.alibaba.dubbo.container.spring.SpringContainer.start(SpringContainer.java:50)
	at com.alibaba.dubbo.container.Main.main(Main.java:80)
	at com.ludateam.wechat.Run.main(Run.java:168)
2017-10-10 13:24:05.712 [] [] [] INFO [DubboShutdownHook] <AbstractConfig.java [450] - run> < [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:24:05.726 [] [] [] INFO [DubboShutdownHook] <AbstractRegistryFactory.java [63] - destroyAll> < [DUBBO] Close all registries [], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:24:05.726 [] [] [] INFO [DubboShutdownHook] <DubboProtocol.java [439] - destroy> < [DUBBO] Close dubbo server: /169.254.148.248:20990, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:24:05.727 [] [] [] INFO [DubboShutdownHook] <AbstractServer.java [147] - close> < [DUBBO] Close NettyServer bind /0.0.0.0:20990, export /169.254.148.248:20990, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:24:05.929 [] [] [] INFO [DubboShutdownHook] <AbstractProtocol.java [76] - destroy> < [DUBBO] Unexport service: dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=25208&serialization=kryo&side=provider&timestamp=1507613038745, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:24:05.930 [] [] [] INFO [DubboShutdownHook] <AbstractProtocol.java [76] - destroy> < [DUBBO] Unexport service: injvm://127.0.0.1/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=25208&serialization=kryo&side=provider&timestamp=1507613038745, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:07.083 [] [] [] INFO [main] <Run.java [55] - <clinit>> <configConstant 视图Beetl设置> 
2017-10-10 13:26:07.450 [] [] [] DEBUG [main] <ToolBeetl.java [45] - regiseter> <注册全局web视图模板解析> 
2017-10-10 13:26:07.473 [] [] [] DEBUG [main] <ToolBeetl.java [62] - regiseter> <注册全局BeetlKit模板解析> 
2017-10-10 13:26:07.488 [] [] [] INFO [main] <Run.java [60] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-10-10 13:26:07.489 [] [] [] INFO [main] <Run.java [67] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-10-10 13:26:07.501 [] [] [] INFO [main] <Run.java [70] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-10-10 13:26:07.502 [] [] [] INFO [main] <Run.java [73] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-10-10 13:26:07.620 [] [] [] INFO [main] <Run.java [82] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-10-10 13:26:08.002 [] [] [] INFO [main] <Run.java [94] - <clinit>> <configPlugin 数据库类型判断> 
2017-10-10 13:26:08.002 [] [] [] INFO [main] <Run.java [100] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-10-10 13:26:08.003 [] [] [] INFO [main] <Run.java [118] - <clinit>> <configPlugin 表自动扫描注册> 
2017-10-10 13:26:08.396 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-10-10 13:26:08.397 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-10-10 13:26:08.398 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-10-10 13:26:08.398 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-10-10 13:26:08.399 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-10-10 13:26:08.403 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-10-10 13:26:08.403 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-10-10 13:26:08.404 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-10-10 13:26:08.405 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-10-10 13:26:08.405 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-10-10 13:26:08.406 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-10-10 13:26:08.407 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-10-10 13:26:08.408 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-10-10 13:26:08.408 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-10-10 13:26:08.409 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-10-10 13:26:08.409 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-10-10 13:26:08.410 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-10-10 13:26:08.410 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-10-10 13:26:08.411 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-10-10 13:26:08.411 [] [] [] INFO [main] <Run.java [121] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-10-10 13:26:08.462 [] [] [] INFO [main] <Run.java [124] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-10-10 13:26:16.837 [] [] [] INFO [main] <Run.java [128] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-10-10 13:26:16.868 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-10-10 13:26:16.870 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-10-10 13:26:16.871 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-10-10 13:26:16.873 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-10-10 13:26:16.875 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-10-10 13:26:16.876 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-10-10 13:26:16.878 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-10-10 13:26:16.879 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-10-10 13:26:16.882 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-10-10 13:26:16.883 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-10-10 13:26:16.885 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-10-10 13:26:16.886 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-10-10 13:26:16.888 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-10-10 13:26:16.889 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-10-10 13:26:16.890 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-10-10 13:26:16.892 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-10-10 13:26:16.893 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-10-10 13:26:16.903 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-10-10 13:26:16.904 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-10-10 13:26:16.905 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-10-10 13:26:16.907 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-10-10 13:26:16.909 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-10-10 13:26:16.912 [] [] [] INFO [main] <Run.java [131] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-10-10 13:26:16.915 [] [] [] INFO [main] <Run.java [135] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-10-10 13:26:18.121 [] [] [] INFO [main] <Run.java [148] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-10-10 13:26:18.303 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-10-10 13:26:18.304 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-10-10 13:26:18.305 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-10-10 13:26:18.306 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-10-10 13:26:18.307 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-10-10 13:26:18.307 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-10-10 13:26:18.313 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-10-10 13:26:18.314 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-10-10 13:26:18.319 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-10-10 13:26:18.321 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-10-10 13:26:18.322 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-10-10 13:26:18.326 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-10-10 13:26:18.327 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-10-10 13:26:18.336 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-10-10 13:26:18.337 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-10-10 13:26:18.339 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-10-10 13:26:18.339 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-10-10 13:26:18.340 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-10-10 13:26:18.345 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-10-10 13:26:18.346 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-10-10 13:26:18.361 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-10-10 13:26:18.363 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-10-10 13:26:18.364 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-10-10 13:26:18.368 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-10-10 13:26:18.386 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-10-10 13:26:18.386 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-10-10 13:26:18.387 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-10-10 13:26:18.388 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-10-10 13:26:18.389 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-10-10 13:26:18.390 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 13:26:18.390 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-10-10 13:26:18.391 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-10-10 13:26:18.392 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:26:18.392 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:26:18.442 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-10-10 13:26:18.443 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 13:26:18.443 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-10-10 13:26:18.447 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:26:18.447 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 13:26:18.447 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-10-10 13:26:18.451 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-10-10 13:26:18.452 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-10-10 13:26:18.452 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-10-10 13:26:18.453 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-10-10 13:26:18.453 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-10-10 13:26:18.454 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 13:26:18.465 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:26:18.466 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-10-10 13:26:18.467 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:26:18.467 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-10-10 13:26:18.468 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-10-10 13:26:18.468 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-10-10 13:26:18.469 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-10-10 13:26:18.469 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-10-10 13:26:18.470 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-10-10 13:26:18.471 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-10-10 13:26:18.474 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-10-10 13:26:18.475 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 13:26:18.475 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 13:26:18.476 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-10-10 13:26:18.476 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-10-10 13:26:18.482 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:26:18.492 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 13:26:18.509 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 13:26:18.523 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-10-10 13:26:18.526 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-10-10 13:26:18.527 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-10-10 13:26:18.528 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-10-10 13:26:18.528 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-10-10 13:26:18.533 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-10-10 13:26:18.534 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-10-10 13:26:18.535 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-10-10 13:26:18.535 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-10-10 13:26:18.536 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-10-10 13:26:18.566 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 13:26:18.567 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-10-10 13:26:18.568 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-10-10 13:26:18.568 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:26:18.569 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:26:18.569 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-10-10 13:26:18.570 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 13:26:18.571 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-10-10 13:26:18.576 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-10-10 13:26:18.577 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-10-10 13:26:18.582 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-10-10 13:26:18.583 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-10-10 13:26:18.583 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-10-10 13:26:18.590 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 13:26:18.592 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-10-10 13:26:18.593 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-10-10 13:26:18.606 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:26:18.607 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 13:26:18.608 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-10-10 13:26:18.608 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 13:26:18.609 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:26:18.610 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-10-10 13:26:18.610 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-10-10 13:26:18.611 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-10-10 13:26:18.616 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:26:18.617 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-10-10 13:26:18.617 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-10-10 13:26:18.618 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-10-10 13:26:18.625 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:26:18.626 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 13:26:18.627 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-10-10 13:26:18.627 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:26:18.628 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-10-10 13:26:18.629 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-10-10 13:26:18.634 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-10-10 13:26:18.634 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-10-10 13:26:18.638 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-10-10 13:26:18.639 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-10-10 13:26:18.640 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-10-10 13:26:18.645 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-10-10 13:26:18.646 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-10-10 13:26:18.650 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-10-10 13:26:18.659 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-10-10 13:26:18.660 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-10-10 13:26:18.666 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:26:18.667 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-10-10 13:26:18.669 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-10-10 13:26:18.670 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-10-10 13:26:18.675 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-10-10 13:26:18.679 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-10-10 13:26:18.680 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-10-10 13:26:18.705 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:26:18.715 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-10-10 13:26:18.734 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-10-10 13:26:18.747 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-10-10 13:26:18.749 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-10-10 13:26:18.750 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-10-10 13:26:18.751 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-10-10 13:26:18.754 [] [] [] INFO [main] <Run.java [151] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-10-10 13:26:18.894 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-10-10 13:26:22.592 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-10-10 13:26:22.608 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:26:23.220 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-10-10 13:26:23.265 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:26:23.300 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_user 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:26:23.317 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:26:23.329 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.344 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 13:26:23.349 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 13:26:23.352 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 13:26:23.390 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.391 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 13:26:23.400 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 13:26:23.401 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 13:26:23.409 [] [] [] INFO [main] <ParamInitPlugin.java [139] - platform_cacheUser> <缓存加载：User end> 
2017-10-10 13:26:23.410 [] [] [] INFO [main] <ParamInitPlugin.java [147] - platform_cacheGroupOperator> <缓存加载：Group Operator start> 
2017-10-10 13:26:23.410 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:26:23.429 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_group  
 > 
2017-10-10 13:26:23.430 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:26:23.446 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_group 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:26:23.450 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:26:23.463 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_roleoperator ro 
            on ro.operatorids = o.ids 
    left join
        pt_grouprole gr 
            on gr.roleids = ro.roleids 
    where
        gr.groupids = ?  
 > 
2017-10-10 13:26:23.468 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 13:26:23.506 [] [] [] INFO [main] <ParamInitPlugin.java [173] - platform_cacheGroupOperator> <缓存加载：Group Operator end> 
2017-10-10 13:26:23.506 [] [] [] INFO [main] <ParamInitPlugin.java [181] - platform_cacheStationOperator> <缓存加载：Station Operator start> 
2017-10-10 13:26:23.507 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:26:23.523 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_station  
 > 
2017-10-10 13:26:23.524 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:26:23.531 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_station 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:26:23.532 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:26:23.546 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:26:23.548 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:23.554 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:26:23.555 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0021 
 > 
2017-10-10 13:26:23.559 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:26:23.560 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0022 
 > 
2017-10-10 13:26:23.566 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:26:23.567 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0023 
 > 
2017-10-10 13:26:23.570 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:26:23.572 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0024 
 > 
2017-10-10 13:26:23.579 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:26:23.581 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0025 
 > 
2017-10-10 13:26:23.588 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:26:23.589 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0026 
 > 
2017-10-10 13:26:23.616 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:26:23.618 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0027 
 > 
2017-10-10 13:26:23.622 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:26:23.622 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 13:26:23.625 [] [] [] INFO [main] <ParamInitPlugin.java [207] - platform_cacheStationOperator> <缓存加载：Station Operator end> 
2017-10-10 13:26:23.626 [] [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheOperator> <缓存加载：Operator start> 
2017-10-10 13:26:23.626 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:26:23.641 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_operator  
 > 
2017-10-10 13:26:23.642 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:26:23.647 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_operator 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:26:23.649 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:26:23.772 [] [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheOperator> <缓存加载：Operator end> 
2017-10-10 13:26:23.772 [] [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheDict> <缓存加载：Dict start> 
2017-10-10 13:26:23.775 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_dict  
 > 
2017-10-10 13:26:23.776 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:26:23.799 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.800 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:26:23.810 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.860 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:26:23.863 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.864 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:23.869 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.870 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:23.874 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.875 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:26:23.880 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.881 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:26:23.893 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.894 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:26:23.898 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.899 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:26:23.903 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.904 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 13:26:23.908 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.909 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 13:26:23.918 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.920 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:26:23.924 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.926 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:26:23.930 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.930 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 13:26:23.934 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.935 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 13:26:23.939 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.940 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:26:23.944 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.947 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:26:23.952 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.953 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:26:23.957 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.959 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:26:23.966 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.967 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:23.974 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:23.975 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:23.982 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:23.983 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 13:26:24.000 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.002 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 13:26:24.025 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.026 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:26:24.030 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.033 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:26:24.037 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.038 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 13:26:24.052 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.053 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 13:26:24.058 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.059 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:26:24.066 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.067 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:26:24.071 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.072 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:26:24.075 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.076 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:26:24.080 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.081 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.084 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.085 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.089 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.090 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:26:24.093 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.094 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:26:24.098 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.099 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:26:24.103 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.107 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:26:24.113 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.114 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:26:24.122 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.124 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:26:24.129 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.129 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.147 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.149 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.155 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.155 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:26:24.159 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.160 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:26:24.166 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.167 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.172 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.173 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.179 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.180 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.185 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.186 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.191 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.192 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.195 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.196 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.202 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.202 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.207 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.209 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.216 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.216 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:26:24.227 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.228 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:26:24.251 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.252 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:26:24.255 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.267 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:26:24.277 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.278 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 13:26:24.313 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.314 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 13:26:24.318 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.319 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:26:24.343 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.344 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:26:24.352 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.353 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 13:26:24.357 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.358 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 13:26:24.362 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.362 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:26:24.365 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.366 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:26:24.371 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.372 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 13:26:24.376 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.377 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 13:26:24.381 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.382 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:26:24.385 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.386 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:26:24.390 [] [] [] INFO [main] <ParamInitPlugin.java [261] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2017-10-10 13:26:24.391 [] [] [] INFO [main] <ParamInitPlugin.java [270] - platform_cacheParam> <缓存加载：Param start> 
2017-10-10 13:26:24.392 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_param  
 > 
2017-10-10 13:26:24.394 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:26:24.400 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.402 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:26:24.408 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.410 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:26:24.415 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.416 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.419 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.419 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.423 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.423 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:26:24.427 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.428 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:26:24.432 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.433 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.438 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.439 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.443 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.443 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:26:24.446 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.447 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:26:24.451 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.451 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.455 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.456 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.462 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.464 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.498 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.499 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:26:24.599 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.600 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.604 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.605 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.608 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:26:24.608 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.613 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:26:24.614 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:26:24.616 [] [] [] INFO [main] <ParamInitPlugin.java [277] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2017-10-10 13:26:24.617 [] [] [] INFO [main] <ParamInitPlugin.java [99] - start> <缓存参数初始化 end ...> 
2017-10-10 13:26:24.617 [] [] [] INFO [main] <Run.java [154] - <clinit>> <configPlugin FileRenamePlugin 配置文件上传命名策略插件> 
2017-10-10 13:26:24.661 [] [] [] INFO [main] <Run.java [157] - <clinit>> <configPlugin QuartzPlugin 配置Quartz插件> 
2017-10-10 13:26:24.858 [] [] [] INFO [main] <? [?] - ?> <using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter> 
2017-10-10 13:26:25.266 [] [] [] INFO [main] <Main.java [58] - main> < [DUBBO] Use container type([spring]) to run dubbo serivce., dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:30.439 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:30.709 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.001 [] [] [] INFO [main] <ServiceBean.java [108] - onApplicationEvent> < [DUBBO] The service ready on spring started. service: com.ludateam.wechat.api.MessageService, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.265 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.293 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.314 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.336 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.337 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.338 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.MessageService url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=29524&registry=zookeeper&timestamp=1507613191021, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.353 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.385 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.427 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.470 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.487 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.824 [] [] [] INFO [main] <AbstractServer.java [70] - <init>> < [DUBBO] Start NettyServer bind /0.0.0.0:20990, export /169.254.148.248:20990, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.850 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:31.897 [] [] [] INFO [main] <AbstractRegistry.java [232] - loadProperties> < [DUBBO] Load registry store file C:\Users\lenovo\.dubbo\dubbo-registry-127.0.0.1.cache, data: {com.ludateam.wechat.api.UserService=empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=configurators&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949 empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=routers&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949 empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=providers&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949, com.alibaba.dubbo.demo.user.facade.AnotherUserRestService=empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=configurators&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722 empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=routers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722 empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=providers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722, annotationConfig/net.aimeizi.student.StudentRestService=empty://169.254.148.248:20880/net.aimeizi.student.StudentRestService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&group=annotationConfig&interface=net.aimeizi.student.StudentRestService&iothreads=10&methods=registerStudent,getStudent&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&side=provider&threads=500&timestamp=1502851536396&validation=true, net.aimeizi.student.StudentRestService=empty://169.254.148.248:8000/services/net.aimeizi.student.StudentRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.student.StudentRestService&methods=registerStudent,getStudent&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&side=provider&threads=500&timestamp=1502851539792&validation=true, com.ludateam.wechat.api.MessageService=empty://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29240&revision=1.0.0&serialization=kryo&server=tomcat&side=provider&timestamp=1507613112173, com.ludateam.wechat.api.CallService=empty://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29240&revision=1.0.0&serialization=kryo&server=tomcat&side=provider&timestamp=1507613117667, com.alibaba.dubbo.monitor.MonitorService=empty://169.254.56.102:7070/com.alibaba.dubbo.monitor.MonitorService?anyhost=true&application=simple-monitor&category=configurators&check=false&delay=-1&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.monitor.MonitorService&methods=lookup,collect&pid=27800&side=provider&timestamp=1461831883967, */com.alibaba.dubbo.demo.bid.BidService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.bid.BidService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.bid.BidService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.bid.BidService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.bid.BidService&version=*, com.alibaba.dubbo.demo.user.facade.UserRestService=empty://169.254.148.248:8888/services/com.alibaba.dubbo.demo.user.facade.UserRestService?accepts=500&anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&extension=com.alibaba.dubbo.demo.extension.TraceInterceptor,                     com.alibaba.dubbo.demo.extension.TraceFilter,                     com.alibaba.dubbo.demo.extension.ClientTraceFilter,                     com.alibaba.dubbo.demo.extension.DynamicTraceBinding,                     com.alibaba.dubbo.demo.extension.CustomExceptionMapper,                     com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter&generic=false&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=12408&server=tomcat&side=provider&threads=500&timestamp=1502787141475&validation=true, net.aimeizi.order.OrderService$Iface=empty://169.254.148.248:33201/net.aimeizi.order.OrderService$Iface?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.order.OrderService$Iface&methods=ping,getOrder&organization=dubbo&owner=aimeizi&pid=38176&service.filter=serviceFilter&side=provider&timeout=10000&timestamp=1502851538967, */com.alibaba.dubbo.monitor.MonitorService:*=empty://169.254.56.102/com.alibaba.dubbo.monitor.MonitorService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.monitor.MonitorService&version=* dubbo://169.254.56.102:7070/com.alibaba.dubbo.monitor.MonitorService?anyhost=true&application=simple-monitor&delay=-1&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.monitor.MonitorService&methods=lookup,collect&pid=27800&side=provider&timestamp=1461831883967, com.alibaba.dubbo.demo.bid.BidService=empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=configurators&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666 empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=routers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666 empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=providers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666, annotationConfig/com.alibaba.dubbo.demo.user.facade.UserRestService=empty://169.254.148.248:20880/com.alibaba.dubbo.demo.user.facade.UserRestService?anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&generic=false&group=annotationConfig&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&methods=getUser,registerUser&optimizer=com.alibaba.dubbo.demo.SerializationOptimizerImpl&organization=dubbox&owner=programmer&pid=12408&serialization=kryo&side=provider&timestamp=1502787139393&validation=true, net.aimeizi.user.UserService=empty://169.254.148.248:20880/net.aimeizi.user.UserService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.user.UserService&iothreads=10&methods=getUserById,updatePassword,ping,registerUser,deleteUserById&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&service.filter=serviceFilter&side=provider&threads=500&timeout=10000&timestamp=1502851538055, xmlConfig/com.alibaba.dubbo.demo.user.UserService=empty://169.254.148.248:20880/com.alibaba.dubbo.demo.user.UserService?anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&generic=false&group=xmlConfig&interface=com.alibaba.dubbo.demo.user.UserService&methods=getUser,registerUser&optimizer=com.alibaba.dubbo.demo.SerializationOptimizerImpl&organization=dubbox&owner=programmer&pid=12408&serialization=kryo&side=provider&timestamp=1502787140960, net.aimeizi.student.AnotherStudentRestService=empty://169.254.148.248:8000/services/net.aimeizi.student.AnotherStudentRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&connections=100&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.student.AnotherStudentRestService&methods=registerStudent,getStudent&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&side=provider&threads=500&timeout=2000&timestamp=1502851540247&validation=true, */com.alibaba.dubbo.demo.user.facade.AnotherUserRestService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&version=*, com.yingjun.dubbox.api.UserService=empty://169.254.148.248:9009/com.yingjun.dubbox.api.UserService?anyhost=true&application=provider&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=5000&dubbo=2.8.4&extension=com.yingjun.dubbox.services.ControllFilter&generic=false&interface=com.yingjun.dubbox.api.UserService&methods=getUserByName,getUserByPhone&owner=yingjun&pid=9444&revision=1.0.0&serialization=kryo&server=tomcat&side=provider&timestamp=1502937435746, */com.alibaba.dubbo.demo.user.facade.UserRestService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.UserRestService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.UserRestService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&version=*, net.aimeizi.person.PersonService=empty://169.254.148.248:40001/net.aimeizi.person.PersonService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.person.PersonService&methods=ping,getPersonList&organization=dubbo&owner=aimeizi&pid=38176&service.filter=serviceFilter&side=provider&timeout=10000&timestamp=1502851537384, xmlConfig/net.aimeizi.student.StudentService=empty://169.254.148.248:20880/net.aimeizi.student.StudentService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&group=xmlConfig&interface=net.aimeizi.student.StudentService&iothreads=10&methods=registerStudent,getStudent&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&side=provider&threads=500&timestamp=1502851539409, */com.alibaba.dubbo.demo.user.UserService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.UserService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.UserService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.UserService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.UserService&version=*, net.aimeizi.user.UserRestService=empty://169.254.148.248:8000/services/net.aimeizi.user.UserRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&connections=100&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.user.UserRestService&methods=getUserById,updatePassword,post,ping,get,registerUser,deleteUserById&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&service.filter=serviceFilter&side=provider&threads=500&timeout=10000&timestamp=1502851538560&validation=true}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:32.151 [] [] [] INFO [main] <AbstractRegistry.java [302] - register> < [DUBBO] Register: dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:32.535 [] [] [] INFO [main] <AbstractRegistry.java [325] - subscribe> < [DUBBO] Subscribe: provider://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:32.829 [] [] [] INFO [main] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034, urls: [empty://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:32.900 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:32.915 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:32.947 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting.http;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class HttpBinder$Adpative implements com.alibaba.dubbo.remoting.http.HttpBinder {
public com.alibaba.dubbo.remoting.http.HttpServer bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.http.HttpHandler arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", "jetty");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.http.HttpBinder) name from url(" + url.toString() + ") use keys([server])");
com.alibaba.dubbo.remoting.http.HttpBinder extension = (com.alibaba.dubbo.remoting.http.HttpBinder)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.http.HttpBinder.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:32.960 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:32.960 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to url rest://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:32.961 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.MessageService url rest://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=29524&registry=zookeeper&timestamp=1507613191021, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:38.377 [] [] [] INFO [main] <AbstractRegistry.java [302] - register> < [DUBBO] Register: rest://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:38.663 [] [] [] INFO [main] <AbstractRegistry.java [325] - subscribe> < [DUBBO] Subscribe: provider://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:38.895 [] [] [] INFO [main] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, urls: [empty://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:38.895 [] [] [] INFO [main] <ServiceBean.java [108] - onApplicationEvent> < [DUBBO] The service ready on spring started. service: com.ludateam.wechat.api.CallService, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:38.984 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.CallService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:38.985 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.CallService to url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:38.985 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.CallService url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=29524&registry=zookeeper&timestamp=1507613198910, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:38.986 [] [] [] INFO [main] <AbstractRegistry.java [302] - register> < [DUBBO] Register: dubbo://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:39.244 [] [] [] INFO [main] <AbstractRegistry.java [325] - subscribe> < [DUBBO] Subscribe: provider://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:39.517 [] [] [] INFO [main] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923, urls: [empty://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:39.521 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.CallService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:39.521 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.CallService to url rest://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:39.522 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.CallService url rest://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=29524&registry=zookeeper&timestamp=1507613198910, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:39.528 [] [] [] INFO [main] <AbstractRegistry.java [302] - register> < [DUBBO] Register: rest://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:39.838 [] [] [] INFO [main] <AbstractRegistry.java [325] - subscribe> < [DUBBO] Subscribe: provider://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:40.024 [] [] [] INFO [main] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519, urls: [empty://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:26:40.071 [] [] [] INFO [main] <Main.java [81] - main> < [DUBBO] Dubbo SpringContainer started!, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:27:09.733 [] [] [] INFO [http-nio-9009-exec-1] <PropertyUtil.java [37] - loadProps> <开始加载properties文件内容.......> 
2017-10-10 13:27:09.995 [] [] [] INFO [http-nio-9009-exec-1] <PropertyUtil.java [57] - loadProps> <加载properties文件内容完成...........> 
2017-10-10 13:27:10.035 [] [] [] INFO [http-nio-9009-exec-1] <PropertyUtil.java [58] - loadProps> <properties文件内容：{dubbo.registry.address=zookeeper://127.0.0.1:2181, xh.wbh=http://172.16.1.51/qywx, xh.nbh=http://172.16.1.50/qywx }> 
2017-10-10 13:28:24.914 [] [] [] INFO [http-nio-9009-exec-1] <MessageServiceImpl.java [59] - sendTextMessage> <post {
} to null/wechat/qyapi/sendTextMessage> 
2017-10-10 13:28:24.962 [] [] [] ERROR [http-nio-9009-exec-1] <ExceptionFilter.java [87] - invoke> < [DUBBO] Got unchecked and undeclared exception which called by 127.0.0.1. service: com.ludateam.wechat.api.MessageService, method: sendTextMessage, exception: java.lang.RuntimeException: java.net.MalformedURLException: no protocol: null/wechat/qyapi/sendTextMessage, dubbo version: 2.8.4, current host: 127.0.0.1> 
java.lang.RuntimeException: java.net.MalformedURLException: no protocol: null/wechat/qyapi/sendTextMessage
	at com.ludateam.wechat.kit.HttpKit.post(HttpKit.java:182)
	at com.ludateam.wechat.kit.HttpKit.post(HttpKit.java:195)
	at com.ludateam.wechat.services.MessageServiceImpl.sendTextMessage(MessageServiceImpl.java:61)
	at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod(Wrapper1.java)
	at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:46)
	at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:72)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:53)
	at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:64)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:75)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:42)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:78)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:70)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:132)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:52)
	at com.alibaba.dubbo.common.bytecode.proxy0.sendTextMessage(proxy0.java)
	at sun.reflect.GeneratedMethodAccessor263.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:137)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:288)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:242)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:229)
	at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:356)
	at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:179)
	at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service(ServletContainerDispatcher.java:220)
	at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:56)
	at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:51)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at com.alibaba.dubbo.rpc.protocol.rest.DubboHttpServer$RestHandler.handle(DubboHttpServer.java:86)
	at com.alibaba.dubbo.remoting.http.servlet.DispatcherServlet.service(DispatcherServlet.java:64)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:106)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:534)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1081)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.MalformedURLException: no protocol: null/wechat/qyapi/sendTextMessage
	at java.net.URL.<init>(URL.java:586)
	at java.net.URL.<init>(URL.java:483)
	at java.net.URL.<init>(URL.java:432)
	at com.ludateam.wechat.kit.HttpKit.getHttpConnection(HttpKit.java:116)
	at com.ludateam.wechat.kit.HttpKit.post(HttpKit.java:172)
	... 59 more
2017-10-10 13:28:24.973 [] [] [] WARN [http-nio-9009-exec-1] <TimeoutFilter.java [48] - invoke> < [DUBBO] invoke time out. method: sendTextMessagearguments: [org.apache.catalina.connector.RequestFacade@77249083] , url is rest://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, invoke elapsed 92173 ms., dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:26.115 [] [] [] INFO [ZkClient-EventThread-83-127.0.0.1:2181] <FailbackRegistry.java [282] - recover> < [DUBBO] Recover register url [dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034, rest://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519, rest://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, dubbo://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:26.122 [] [] [] INFO [ZkClient-EventThread-83-127.0.0.1:2181] <FailbackRegistry.java [292] - recover> < [DUBBO] Recover subscribe url [provider://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034, provider://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519, provider://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923, provider://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:26.226 [] [] [] INFO [ZkClient-EventThread-83-127.0.0.1:2181] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923, urls: [empty://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:26.256 [] [] [] INFO [ZkClient-EventThread-83-127.0.0.1:2181] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519, urls: [empty://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:26.267 [] [] [] INFO [ZkClient-EventThread-83-127.0.0.1:2181] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034, urls: [empty://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:26.287 [] [] [] INFO [ZkClient-EventThread-83-127.0.0.1:2181] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, urls: [empty://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:29.914 [] [] [] INFO [DubboRegistryFailedRetryTimer-thread-1] <FailbackRegistry.java [309] - retry> < [DUBBO] Retry register [dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034, rest://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519, rest://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, dubbo://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:30.918 [] [] [] INFO [DubboRegistryFailedRetryTimer-thread-1] <FailbackRegistry.java [354] - retry> < [DUBBO] Retry subscribe {provider://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034=[com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener@47cf65f1], provider://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519=[com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener@729cb7b], provider://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923=[com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener@29296e7], provider://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958=[com.alibaba.dubbo.registry.integration.RegistryProtocol$OverrideListener@9b9a322]}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:31.096 [] [] [] INFO [DubboRegistryFailedRetryTimer-thread-1] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034, urls: [empty://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613191034], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:31.271 [] [] [] INFO [DubboRegistryFailedRetryTimer-thread-1] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519, urls: [empty://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613199519], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:31.448 [] [] [] INFO [DubboRegistryFailedRetryTimer-thread-1] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923, urls: [empty://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:28:31.678 [] [] [] INFO [DubboRegistryFailedRetryTimer-thread-1] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, urls: [empty://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:29:48.651 [] [] [] INFO [http-nio-9009-exec-2] <MessageServiceImpl.java [59] - sendTextMessage> <post {
} to null/wechat/qyapi/sendTextMessage> 
2017-10-10 13:29:48.656 [] [] [] ERROR [http-nio-9009-exec-2] <ExceptionFilter.java [87] - invoke> < [DUBBO] Got unchecked and undeclared exception which called by 127.0.0.1. service: com.ludateam.wechat.api.MessageService, method: sendTextMessage, exception: java.lang.RuntimeException: java.net.MalformedURLException: no protocol: null/wechat/qyapi/sendTextMessage, dubbo version: 2.8.4, current host: 127.0.0.1> 
java.lang.RuntimeException: java.net.MalformedURLException: no protocol: null/wechat/qyapi/sendTextMessage
	at com.ludateam.wechat.kit.HttpKit.post(HttpKit.java:182)
	at com.ludateam.wechat.kit.HttpKit.post(HttpKit.java:195)
	at com.ludateam.wechat.services.MessageServiceImpl.sendTextMessage(MessageServiceImpl.java:61)
	at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod(Wrapper1.java)
	at com.alibaba.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1.doInvoke(JavassistProxyFactory.java:46)
	at com.alibaba.dubbo.rpc.proxy.AbstractProxyInvoker.invoke(AbstractProxyInvoker.java:72)
	at com.alibaba.dubbo.rpc.protocol.InvokerWrapper.invoke(InvokerWrapper.java:53)
	at com.alibaba.dubbo.rpc.filter.ExceptionFilter.invoke(ExceptionFilter.java:64)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.monitor.support.MonitorFilter.invoke(MonitorFilter.java:75)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.TimeoutFilter.invoke(TimeoutFilter.java:42)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.protocol.dubbo.filter.TraceFilter.invoke(TraceFilter.java:78)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.ContextFilter.invoke(ContextFilter.java:70)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.GenericFilter.invoke(GenericFilter.java:132)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.ClassLoaderFilter.invoke(ClassLoaderFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.filter.EchoFilter.invoke(EchoFilter.java:38)
	at com.alibaba.dubbo.rpc.protocol.ProtocolFilterWrapper$1.invoke(ProtocolFilterWrapper.java:91)
	at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:52)
	at com.alibaba.dubbo.common.bytecode.proxy0.sendTextMessage(proxy0.java)
	at sun.reflect.GeneratedMethodAccessor263.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.jboss.resteasy.core.MethodInjectorImpl.invoke(MethodInjectorImpl.java:137)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invokeOnTarget(ResourceMethodInvoker.java:288)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:242)
	at org.jboss.resteasy.core.ResourceMethodInvoker.invoke(ResourceMethodInvoker.java:229)
	at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:356)
	at org.jboss.resteasy.core.SynchronousDispatcher.invoke(SynchronousDispatcher.java:179)
	at org.jboss.resteasy.plugins.server.servlet.ServletContainerDispatcher.service(ServletContainerDispatcher.java:220)
	at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:56)
	at org.jboss.resteasy.plugins.server.servlet.HttpServletDispatcher.service(HttpServletDispatcher.java:51)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at com.alibaba.dubbo.rpc.protocol.rest.DubboHttpServer$RestHandler.handle(DubboHttpServer.java:86)
	at com.alibaba.dubbo.remoting.http.servlet.DispatcherServlet.service(DispatcherServlet.java:64)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:219)
	at org.apache.catalina.core.StandardContextValve.__invoke(StandardContextValve.java:106)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:504)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:534)
	at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1081)
	at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:658)
	at org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:222)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1566)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1523)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.net.MalformedURLException: no protocol: null/wechat/qyapi/sendTextMessage
	at java.net.URL.<init>(URL.java:586)
	at java.net.URL.<init>(URL.java:483)
	at java.net.URL.<init>(URL.java:432)
	at com.ludateam.wechat.kit.HttpKit.getHttpConnection(HttpKit.java:116)
	at com.ludateam.wechat.kit.HttpKit.post(HttpKit.java:172)
	... 59 more
2017-10-10 13:30:01.875 [] [] [] INFO [main] <Run.java [55] - <clinit>> <configConstant 视图Beetl设置> 
2017-10-10 13:30:02.172 [] [] [] DEBUG [main] <ToolBeetl.java [45] - regiseter> <注册全局web视图模板解析> 
2017-10-10 13:30:02.201 [] [] [] DEBUG [main] <ToolBeetl.java [62] - regiseter> <注册全局BeetlKit模板解析> 
2017-10-10 13:30:02.219 [] [] [] INFO [main] <Run.java [60] - <clinit>> <注册paltform ActiveRecordPlugin> 
2017-10-10 13:30:02.221 [] [] [] INFO [main] <Run.java [67] - <clinit>> <configPlugin 配置Druid数据库连接池连接属性> 
2017-10-10 13:30:02.228 [] [] [] INFO [main] <Run.java [70] - <clinit>> <configPlugin 配置Druid数据库连接池大小> 
2017-10-10 13:30:02.228 [] [] [] INFO [main] <Run.java [73] - <clinit>> <configPlugin 配置Druid数据库连接池过滤器配制> 
2017-10-10 13:30:02.322 [] [] [] INFO [main] <Run.java [82] - <clinit>> <configPlugin 配置ActiveRecordPlugin插件> 
2017-10-10 13:30:02.424 [] [] [] INFO [main] <Run.java [94] - <clinit>> <configPlugin 数据库类型判断> 
2017-10-10 13:30:02.425 [] [] [] INFO [main] <Run.java [100] - <clinit>> <configPlugin 使用数据库类型是 mysql> 
2017-10-10 13:30:02.425 [] [] [] INFO [main] <Run.java [118] - <clinit>> <configPlugin 表自动扫描注册> 
2017-10-10 13:30:02.849 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.UserInfo, tableName = pt_userinfo, pkName: ids> 
2017-10-10 13:30:02.850 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.group.Group, tableName = pt_group, pkName: ids> 
2017-10-10 13:30:02.850 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.grouprole.GroupRole, tableName = pt_grouprole, pkName: ids> 
2017-10-10 13:30:02.851 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.stationoperator.StationOperator, tableName = pt_stationoperator, pkName: ids> 
2017-10-10 13:30:02.852 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.systems.Systems, tableName = pt_systems, pkName: ids> 
2017-10-10 13:30:02.854 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.menu.Menu, tableName = pt_menu, pkName: ids> 
2017-10-10 13:30:02.855 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.roleoperator.RoleOperator, tableName = pt_roleoperator, pkName: ids> 
2017-10-10 13:30:02.856 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dept.Department, tableName = pt_department, pkName: ids> 
2017-10-10 13:30:02.857 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.module.Module, tableName = pt_module, pkName: ids> 
2017-10-10 13:30:02.860 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.upload.Upload, tableName = pt_upload, pkName: ids> 
2017-10-10 13:30:02.860 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.operator.Operator, tableName = pt_operator, pkName: ids> 
2017-10-10 13:30:02.861 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.param.Param, tableName = pt_param, pkName: ids> 
2017-10-10 13:30:02.862 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.syslog.Syslog, tableName = pt_syslog, pkName: ids> 
2017-10-10 13:30:02.862 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.user.User, tableName = pt_user, pkName: ids> 
2017-10-10 13:30:02.863 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.station.Station, tableName = pt_station, pkName: ids> 
2017-10-10 13:30:02.864 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.dict.Dict, tableName = pt_dict, pkName: ids> 
2017-10-10 13:30:02.864 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.usergroup.UserGroup, tableName = pt_usergroup, pkName: ids> 
2017-10-10 13:30:02.866 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.resources.Resources, tableName = pt_resources, pkName: ids> 
2017-10-10 13:30:02.867 [] [] [] DEBUG [main] <ModelScan.java [54] - scan> <Model注册： model = class com.platform.mvc.role.Role, tableName = pt_role, pkName: ids> 
2017-10-10 13:30:02.867 [] [] [] INFO [main] <Run.java [121] - <clinit>> <configPlugin 添加druidPlugin插件> 
2017-10-10 13:30:02.915 [] [] [] INFO [main] <Run.java [124] - <clinit>> <configPlugin 注册ActiveRecordPlugin插件> 
2017-10-10 13:30:05.891 [] [] [] INFO [main] <Run.java [128] - <clinit>> <ServicePlugin Service注解实例化加载> 
2017-10-10 13:30:05.917 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = resourcesService, class = com.platform.mvc.resources.ResourcesService> 
2017-10-10 13:30:05.919 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = departmentService, class = com.platform.mvc.dept.DepartmentService> 
2017-10-10 13:30:05.922 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = menuService, class = com.platform.mvc.menu.MenuService> 
2017-10-10 13:30:05.924 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleOperatorService, class = com.platform.mvc.roleoperator.RoleOperatorService> 
2017-10-10 13:30:05.926 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = dictService, class = com.platform.mvc.dict.DictService> 
2017-10-10 13:30:05.927 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = imageService, class = com.platform.mvc.image.ImageService> 
2017-10-10 13:30:05.929 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupRoleService, class = com.platform.mvc.grouprole.GroupRoleService> 
2017-10-10 13:30:05.930 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = paramService, class = com.platform.mvc.param.ParamService> 
2017-10-10 13:30:05.932 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationService, class = com.platform.mvc.station.StationService> 
2017-10-10 13:30:05.939 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = sysLogService, class = com.platform.mvc.syslog.SysLogService> 
2017-10-10 13:30:05.940 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = systemsService, class = com.platform.mvc.systems.SystemsService> 
2017-10-10 13:30:05.942 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = uploadService, class = com.platform.mvc.upload.UploadService> 
2017-10-10 13:30:05.943 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userGroupService, class = com.platform.mvc.usergroup.UserGroupService> 
2017-10-10 13:30:05.945 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = moduleService, class = com.platform.mvc.module.ModuleService> 
2017-10-10 13:30:05.947 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = operatorService, class = com.platform.mvc.operator.OperatorService> 
2017-10-10 13:30:05.948 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = baseService, class = com.platform.mvc.base.BaseService> 
2017-10-10 13:30:05.950 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = groupService, class = com.platform.mvc.group.GroupService> 
2017-10-10 13:30:05.952 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = stationOperatorService, class = com.platform.mvc.stationoperator.StationOperatorService> 
2017-10-10 13:30:05.954 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = userService, class = com.platform.mvc.user.UserService> 
2017-10-10 13:30:05.956 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = roleService, class = com.platform.mvc.role.RoleService> 
2017-10-10 13:30:05.957 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = indexService, class = com.platform.mvc.index.IndexService> 
2017-10-10 13:30:05.959 [] [] [] DEBUG [main] <ServicePlugin.java [76] - start> <Service注册： name = loginService, class = com.platform.mvc.login.LoginService> 
2017-10-10 13:30:05.963 [] [] [] INFO [main] <Run.java [131] - <clinit>> <I18NPlugin 国际化键值对加载> 
2017-10-10 13:30:05.967 [] [] [] INFO [main] <Run.java [135] - <clinit>> <EhCachePlugin EhCache缓存> 
2017-10-10 13:30:06.862 [] [] [] INFO [main] <Run.java [148] - <clinit>> <configPlugin SqlXmlPlugin 解析并缓存 xml sql> 
2017-10-10 13:30:07.053 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.select, sql content =  select ${column} from ${table} where ${condition} = ? > 
2017-10-10 13:30:07.057 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.update, sql content =  update ${table} set ${column} = ? where ${condition} = ? > 
2017-10-10 13:30:07.058 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.delete, sql content =  delete from ${table} where ${column} = ? > 
2017-10-10 13:30:07.059 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteIn, sql content =  delete from ${table} where ids in( ${sqlIn} ) > 
2017-10-10 13:30:07.061 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.deleteOr, sql content =  delete from ${table} where ${sqlOr} > 
2017-10-10 13:30:07.062 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = baseModel.sql.xml, sql key = platform.baseModel.splitPageSelect, sql content =  select * > 
2017-10-10 13:30:07.067 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getTableComments, sql content =  select lower(t.name) name, lower(t.remarks) remarks from SYSIBM.SYSTABLES t where creator = ? and name = upper(?) > 
2017-10-10 13:30:07.068 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = db2.sql.xml, sql key = platform.db2.getColumnComments, sql content =  select lower(t.colname) colname, lower(t.typename) typename, t.length, t.remarks from syscat.columns t where tabschema = ? and tabname = upper(?) > 
2017-10-10 13:30:07.074 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getDatabase, sql content =  show databases > 
2017-10-10 13:30:07.075 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getTables, sql content =  select * from tables where table_schema = ? and table_name = ? > 
2017-10-10 13:30:07.076 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = mysql.sql.xml, sql key = platform.mysql.getColumns, sql content =  select * from columns where table_schema = ? and table_name = ? > 
2017-10-10 13:30:07.082 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getTableComments, sql content =  select * from all_tab_comments where owner = upper(?) and table_name = upper(?) > 
2017-10-10 13:30:07.083 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = oracle.sql.xml, sql key = platform.oracle.getColumnComments, sql content =  select t1.* , (select t2.comments from all_col_comments t2 where t2.COLUMN_NAME = t1.COLUMN_NAME and owner = upper(?) and table_name=upper(?)) as comments from user_tab_columns t1 where t1.table_name=upper(?) > 
2017-10-10 13:30:07.090 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getDatabase, sql content =  select datname from pg_database > 
2017-10-10 13:30:07.091 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getTables, sql content =  select tablename from pg_tables where tablename not like 'pg%' and tablename not like 'sql_%' order by tablename asc > 
2017-10-10 13:30:07.092 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumns, sql content =  select column_name, data_type, character_maximum_length from information_schema.columns where table_name = ? > 
2017-10-10 13:30:07.093 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.getColumnsInfo, sql content =  select tbl.tablename, des.objsubid, des.description, (select att.attname from pg_attribute att where c.oid = att.attrelid and des.objsubid = att.attnum) attname from pg_tables as tbl inner join pg_class c ON tbl.tablename = c.relname left join pg_description as des ON c.oid = des.objoid where tbl.schemaname != 'pg_catalog' AND tbl.schemaname != 'information_schema' and tbl.tablename = ? order by des.objsubid asc > 
2017-10-10 13:30:07.095 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = postgresql.sql.xml, sql key = platform.postgresql.treeSql, sql content =  WITH RECURSIVE ptTree AS ( SELECT * FROM pt_station WHERE (parentstationids is null or parentstationids = '') union ALL SELECT pt_station.* FROM pt_station, ptTree WHERE pt_station.parentstationids = ptTree.ids ) SELECT * FROM ptTree > 
2017-10-10 13:30:07.100 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getTables, sql content =  select a.name, b.value from sysobjects a left join sys.extended_properties b on a.id=b.major_id and b.minor_id=0 where xtype='U' and a.name = ? > 
2017-10-10 13:30:07.115 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sqlserver.sql.xml, sql key = platform.sqlserver.getColumns, sql content =  select a.name, b.name type, a.length, isnull(g.[value],'') remarks from syscolumns a left join systypes b on a.xusertype=b.xusertype inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name <> 'dtproperties' left join sys.extended_properties g on a.id=G.major_id and a.colid = g.minor_id where d.name = ? order by a.id, a.colorder > 
2017-10-10 13:30:07.122 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.rootNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds is null order by orderIds asc > 
2017-10-10 13:30:07.123 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childNode, sql content =  select ids, names, isparent, images from pt_department where parentDepartmentIds = ? order by orderIds asc > 
2017-10-10 13:30:07.124 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.childCount, sql content =  select count(*) as counts from pt_department where parentdepartmentids = ? > 
2017-10-10 13:30:07.125 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = department.sql.xml, sql key = platform.department.userCount, sql content =  select count(*) as counts from pt_user where departmentids = ? > 
2017-10-10 13:30:07.134 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.all, sql content =  select ids from pt_dict > 
2017-10-10 13:30:07.135 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableNodeRoot, sql content =  select * from pt_dict where parentids is null order by orderIds asc > 
2017-10-10 13:30:07.136 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeTableChildNode, sql content =  select * from pt_dict where parentids=? order by orderIds asc > 
2017-10-10 13:30:07.138 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds is null order by orderIds asc > 
2017-10-10 13:30:07.168 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_dict where parentIds = ? order by orderids asc > 
2017-10-10 13:30:07.169 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 13:30:07.170 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbers, sql content =  select * from pt_dict where numbers = ? > 
2017-10-10 13:30:07.172 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where numbers = ? > 
2017-10-10 13:30:07.172 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.child, sql content =  select * from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:30:07.173 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:30:07.174 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parent, sql content =  select * from pt_dict where ids = ? > 
2017-10-10 13:30:07.175 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_dict where ids = ? > 
2017-10-10 13:30:07.175 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = dict.sql.xml, sql key = platform.dict.childCount, sql content =  select count(*) as counts from pt_dict where parentids = ? > 
2017-10-10 13:30:07.181 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_group order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_group) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_group where ids not in ( select top {1, number, #.#} ids from pt_group ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_group ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:30:07.182 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.splitPageFrom, sql content =  from pt_group where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 13:30:07.182 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = group.sql.xml, sql key = platform.group.getUserByGroup, sql content =  select userIds from pt_usergroup where groupIds = ? > 
2017-10-10 13:30:07.189 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupAndRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? and gr.groupids = ? > 
2017-10-10 13:30:07.190 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids = ? > 
2017-10-10 13:30:07.191 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByGroupIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.groupids = ? > 
2017-10-10 13:30:07.192 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotRoleIds, sql content =  select gr.*, r.ids rid, r.names rname,g.ids gid, g.names gname from pt_grouprole gr left join pt_group g on g.ids = gr.groupids left join pt_role r on r.ids = gr.roleids where gr.roleids != ? > 
2017-10-10 13:30:07.194 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findByNotGroupIds, sql content =  select r.* from pt_role r where r.ids not in ( select gr.roleids from pt_grouprole gr where gr.groupids = ? ) > 
2017-10-10 13:30:07.195 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = groupRole.sql.xml, sql key = platform.groupRole.findOperatorByGroupIds, sql content =  select o.ids, o.url from pt_operator o left join pt_roleoperator ro on ro.operatorids = o.ids left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 13:30:07.204 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:30:07.206 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids ) a > 
2017-10-10 13:30:07.208 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select m.ids from pt_menu m where m.ids = ? and m.operatorids = o.ids ) mids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:30:07.209 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.findByIds, sql content =  select ids, ${names}, isparent, images from pt_menu where ids = ? > 
2017-10-10 13:30:07.211 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.root, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds is null and systemsIds = ? > 
2017-10-10 13:30:07.212 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.child, sql content =  select ids, ${names}, isparent, images from pt_menu where parentMenuIds = ? order by orderIds asc > 
2017-10-10 13:30:07.214 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.childCount, sql content =  select count(*) as counts from pt_menu where parentmenuids = ? > 
2017-10-10 13:30:07.215 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.rootId, sql content =  select ids from pt_menu where parentmenuids is null and systemsIds = ? > 
2017-10-10 13:30:07.216 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.operator, sql content =  select m.${names}, o.url from pt_menu m left join pt_operator o on m.operatorids=o.ids where parentmenuids = ? and ( m.operatorids in ( select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? ) or m.operatorids in ( select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where u.ids = ? ) ) order by orderids asc > 
2017-10-10 13:30:07.217 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = menu.sql.xml, sql key = platform.menu.deleteBySystemsId, sql content =  delete from pt_menu where systemsids = ? > 
2017-10-10 13:30:07.227 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.rootBySystemIds, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds is null and systemsIds = ? order by orderIds asc > 
2017-10-10 13:30:07.228 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.root, sql content =  select pm.ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 13:30:07.230 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.child, sql content =  select ids, names, isparent, images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 13:30:07.231 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.childCount, sql content =  select count(*) as counts from pt_module where parentmoduleids = ? > 
2017-10-10 13:30:07.232 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = module.sql.xml, sql key = platform.module.deleteBySystemsId, sql content =  delete from pt_module where systemsids = ? > 
2017-10-10 13:30:07.239 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_operator order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_operator) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_operator where ids not in ( select top {1, number, #.#} ids from pt_operator ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_operator ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:30:07.240 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.rootModule, sql content =  select pm.ids as ids, (select ps.names from pt_systems ps where ps.ids = pm.systemsIds) as names, pm.isParent, pm.images from pt_module pm where pm.parentModuleIds is null order by pm.orderIds asc > 
2017-10-10 13:30:07.241 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.childModule, sql content =  select ids, names, isParent , images from pt_module where parentModuleIds = ? order by orderIds asc > 
2017-10-10 13:30:07.242 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.byModuleIds, sql content =  select ids, names from pt_operator where privilegess = '1' and moduleIds = ? order by url asc > 
2017-10-10 13:30:07.243 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.url, sql content =  select * from pt_operator where url = ? > 
2017-10-10 13:30:07.243 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageSelect, sql content =  select o.ids, o.names, o.url, o.rowFilter, o.splitPage, o.formToken, o.privilegess, o.csrf, o.referer, o.method, o.enctype, o.syslog, m.names as modulenames, s.names as systemsnames > 
2017-10-10 13:30:07.244 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.splitPageFrom, sql content =  from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(sids)){ %> and s.ids = #'$sids$'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mids)){ %> and m.ids = #'$mids$'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(splitPage)){ %> and o.splitPage = #'$splitPage$'# <% } %> <% if(!isEmpty(formToken)){ %> and o.formToken = #'$formToken$'# <% } %> <% if(!isEmpty(privilegess)){ %> and o.privilegess = #'$privilegess$'# <% } %> <% if(!isEmpty(csrf)){ %> and o.csrf = #'$csrf$'# <% } %> <% if(!isEmpty(referer)){ %> and o.referer = #'$referer$'# <% } %> <% if(!isEmpty(method)){ %> and o.method = #'$method$'# <% } %> > 
2017-10-10 13:30:07.245 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = operator.sql.xml, sql key = platform.operator.getRoleoperatorByOperatorids, sql content =  select * from pt_roleoperator where operatorids = ? > 
2017-10-10 13:30:07.256 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.all, sql content =  select ids from pt_param > 
2017-10-10 13:30:07.257 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableNodeRoot, sql content =  select * from pt_param where parentids is null order by orderIds asc > 
2017-10-10 13:30:07.258 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeTableChildNode, sql content =  select * from pt_param where parentids=? order by orderIds asc > 
2017-10-10 13:30:07.258 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeNodeRoot, sql content =  select ids, names, isparent, images, status from pt_param where parentIds is null order by orderIds asc > 
2017-10-10 13:30:07.259 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.treeChildNode, sql content =  select ids, names, isparent, images, status from pt_param where parentIds = ? order by orderids asc > 
2017-10-10 13:30:07.260 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.idAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 13:30:07.261 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbers, sql content =  select * from pt_param where numbers = ? > 
2017-10-10 13:30:07.261 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.numbersAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where numbers = ? > 
2017-10-10 13:30:07.262 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.child, sql content =  select * from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:30:07.263 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childAndI8n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where parentids = ? and status = '1' order by orderids asc > 
2017-10-10 13:30:07.264 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parent, sql content =  select * from pt_param where ids = ? > 
2017-10-10 13:30:07.264 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.parentAndI18n, sql content =  select ids, numbers, parentids, val${i18nColumnSuffix} as val from pt_param where ids = ? > 
2017-10-10 13:30:07.265 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = param.sql.xml, sql key = platform.param.childCount, sql content =  select count(*) as counts from pt_param where parentids = ? > 
2017-10-10 13:30:07.271 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.pv, sql content =  <% if(db_type == "mysql"){ %> select date_format(startdate,'%Y-%m-%d') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "postgresql"){ %> select to_char(startdate, 'yyyy-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by adates order by adates asc <% } else if(db_type == "oracle"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } else if(db_type == "sqlserver"){ %> select CONVERT(varchar(100), startdate, 23) adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by CONVERT(varchar(100), startdate, 23) order by adates asc <% } else if(db_type == "db2"){ %> select to_char(startdate,'YYYY-MM-DD') adates, count(*) acounts from pt_syslog where startdate>=? and startdate<=? group by to_char(startdate,'YYYY-MM-DD') order by adates asc <% } %> > 
2017-10-10 13:30:07.272 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = resources.sql.xml, sql key = platform.resources.24hour, sql content =  select * from pt_resources where hostname=? and createdate>=? and createdate<=? order by createdate asc > 
2017-10-10 13:30:07.277 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noCheckedFilter, sql content =  select ids, names from pt_role where ids not in ( ${fitler} ) order by names asc > 
2017-10-10 13:30:07.278 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.checkedFilter, sql content =  select ids, names from pt_role where ids in ( ${fitler} ) order by names asc > 
2017-10-10 13:30:07.279 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.noChecked, sql content =  select ids, names from pt_role order by names asc > 
2017-10-10 13:30:07.279 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.splitPageFrom, sql content =  from pt_role where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> <% if(!isEmpty(numbers)){ %> and numbers like #'%$numbers$%'# <% } %> > 
2017-10-10 13:30:07.280 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getGrouproleByRoleids, sql content =  select * from pt_grouprole where roleids = ? > 
2017-10-10 13:30:07.281 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = role.sql.xml, sql key = platform.role.getRoleoperatorByRoleids, sql content =  select * from pt_roleoperator where roleids = ? > 
2017-10-10 13:30:07.293 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:30:07.294 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 13:30:07.294 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByUserIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ug.userids = ? > 
2017-10-10 13:30:07.295 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByGroupIds, sql content =  select ro.operatorids from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids where gr.groupids = ? > 
2017-10-10 13:30:07.296 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.findByModuleAndRoleIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = o.ids ) roids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:30:07.296 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_roleoperator ro left join pt_grouprole gr on gr.roleids = ro.roleids left join pt_usergroup ug on ug.groupids = gr.groupids where ro.operatorids = ? and ug.userids = ? > 
2017-10-10 13:30:07.297 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.delByRoleAndOperatorIds, sql content =  delete from pt_roleoperator ro where ro.roleids = ? and ro.operatorids = ? > 
2017-10-10 13:30:07.297 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = roleOperator.sql.xml, sql key = platform.roleOperator.getGroupByRole, sql content =  select groupids from pt_grouprole where roleids = ? > 
2017-10-10 13:30:07.302 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_station order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_station) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_station where ids not in ( select top {1, number, #.#} ids from pt_station ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_station ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:30:07.303 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.root, sql content =  select ids, names, isparent, images from pt_station where parentStationIds is null order by orderIds asc > 
2017-10-10 13:30:07.304 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.child, sql content =  select ids, names, isparent, images from pt_station where parentStationIds = ? order by orderIds asc > 
2017-10-10 13:30:07.304 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = station.sql.xml, sql key = platform.station.childCount, sql content =  select count(*) as counts from pt_station where parentstationids = ? > 
2017-10-10 13:30:07.309 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageSelect, sql content =  select a.* > 
2017-10-10 13:30:07.310 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.splitPageFrom, sql content =  from ( select s.ids sids, s.names sname, s.orderids sorder, m.ids mids, m.names mname, m.orderids morder, pm.ids pmids, pm.names pmname, pm.orderids pmorder from pt_operator o left join pt_module m on m.ids = o.moduleids left join pt_module pm on pm.ids = m.parentmoduleids left join pt_systems s on s.ids = m.systemsids where 1=1 <% if(!isEmpty(oname)){ %> and o.names like #'%$oname$%'# <% } %> <% if(!isEmpty(ourl)){ %> and o.url like #'%$ourl$%'# <% } %> <% if(!isEmpty(sname)){ %> and s.names like #'%$sname$%'# <% } %> <% if(!isEmpty(mname)){ %> and m.names like #'%$mname$%'# <% } %> group by s.ids , s.names , s.orderids , m.ids , m.names , m.orderids , pm.ids, pm.names, pm.orderids <% if(db_type == "mysql" || db_type == "postgresql"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "oracle"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } else if(db_type == "sqlserver"){ %> <% } else if(db_type == "db2"){ %> order by s.orderids asc, pm.names asc, m.names asc <% } %> ) a > 
2017-10-10 13:30:07.311 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByUserIds, sql content =  select so.operatorids from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where us.userids = ? > 
2017-10-10 13:30:07.311 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findByStationIds, sql content =  select o.ids, o.names, o.url, ( select ids from pt_stationoperator so where so.stationids = ? and so.operatorids = o.ids ) soids from pt_operator o where o.moduleids = ? > 
2017-10-10 13:30:07.312 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.hasUrlByOperatorAndUserIds, sql content =  select count(*) from pt_stationoperator so left join pt_station s on s.ids = so.stationids left join pt_user u on u.stationids = s.ids where so.operatorids = ? and u.ids = ? > 
2017-10-10 13:30:07.313 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = stationOperator.sql.xml, sql key = platform.stationOperator.findOperatorByStationIds, sql content =  select o.ids, o.url from pt_operator o left join pt_stationoperator so on so.operatorids = o.ids where so.stationids = ? > 
2017-10-10 13:30:07.318 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.view, sql content =  select s.*, o.names onames, o.url ourl, u.username from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids where s.ids = ? > 
2017-10-10 13:30:07.318 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageSelect, sql content =  select sy.names synames, m.names mnames, o.names onames, o.url ourl, u.username, s.* > 
2017-10-10 13:30:07.320 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.splitPageFrom, sql content =  from pt_syslog s left join pt_user u on s.userids = u.ids left join pt_operator o on s.operatorids = o.ids left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where 1=1 <% if(!isEmpty(url)){ %> and o.url like #'%$url$%'# <% } %> <% if(!isEmpty(names)){ %> and o.names like #'%$names$%'# <% } %> <% if(!isEmpty(username)){ %> and u.username like #'%$username$%'# <% } %> <% if(!isEmpty(ips)){ %> and s.ips like #'%$ips$%'# <% } %> <% if(!isEmpty(status)){ %> and s.status = #'$status$'# <% } %> <% if(!isEmpty(startdate_start)){ %> <% if(db_type == "mysql"){ %> and s.startdate >= str_to_date(#'$startdate_start$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate >= to_timestamp(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate >= CONVERT(datetime, #'$startdate_start$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate >= to_date(#'$startdate_start$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> <% if(!isEmpty(startdate_end)){ %> <% if(db_type == "mysql"){ %> and s.startdate <= str_to_date(#'$startdate_end$'#, '%Y-%m-%d %H:%i:%s') <% } else if(db_type == "postgresql"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'YYYY-MM-DD HH24:MI:SS') <% } else if(db_type == "oracle"){ %> and s.startdate <= to_timestamp(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% } else if(db_type == "sqlserver"){ %> and s.startdate <= CONVERT(datetime, #'$startdate_end$'#, 120) <% } else if(db_type == "db2"){ %> and s.startdate <= to_date(#'$startdate_end$'#, 'yyyy-mm-dd hh24:mi:ss') <% }%> <% } %> > 
2017-10-10 13:30:07.321 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.clear, sql content =  delete from pt_syslog where startdate < ? > 
2017-10-10 13:30:07.321 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = sysLog.sql.xml, sql key = platform.sysLog.deleteBySystemsId, sql content =  delete from pt_syslog where operatorids in ( select o.ids from pt_operator o left join pt_module m on o.moduleids = m.ids left join pt_systems sy on m.systemsids = sy.ids where systemsids = ? ) > 
2017-10-10 13:30:07.331 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.all, sql content =  select ids, names from pt_systems order by orderids asc > 
2017-10-10 13:30:07.332 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = systems.sql.xml, sql key = platform.systems.splitPageFrom, sql content =  from pt_systems where 1=1 <% if(!isEmpty(names)){ %> and names like #'%$names$%'# <% } %> > 
2017-10-10 13:30:07.336 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = test.sql.xml, sql key = platform.test.autoComplete, sql content =  select url from pt_operator where url like #'$url$%'# limit #$size$# offset 0 > 
2017-10-10 13:30:07.341 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.splitPageFrom, sql content =  from pt_upload where 1=1 <% if(!isEmpty(filename)){ %> and filename like #'%$filename$%'# <% } %> <% if(!isEmpty(contenttype)){ %> and contenttype like #'%$contenttype$%'# <% } %> <% if(!isEmpty(originalfilename)){ %> and originalfilename like #'%$originalfilename$%'# <% } %> <% if(!isEmpty(path)){ %> and path = #$path$# <% } %> > 
2017-10-10 13:30:07.341 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = upload.sql.xml, sql key = platform.upload.md5, sql content =  select count(ids) from pt_upload where md5 = ? > 
2017-10-10 13:30:07.347 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_user order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_user) a where rownum < ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_user where ids not in ( select top {1, number, #.#} ids from pt_user ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_user ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:30:07.347 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.treeUserNode, sql content =  select ids, userName as names from pt_user where departmentIds = ? order by userName asc > 
2017-10-10 13:30:07.348 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.column, sql content =  select * from pt_user where ${column} = ? > 
2017-10-10 13:30:07.349 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.stop, sql content =  update pt_user set stopDate = ?, errorCount = ? where ids = ? > 
2017-10-10 13:30:07.349 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.start, sql content =  update pt_user set stopdate = null, errorcount = 0 where ids = ? > 
2017-10-10 13:30:07.349 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageSelect, sql content =  select u.ids, u.username, u.names, u.email, u.mobile, ui.birthday, d.names as deptnames > 
2017-10-10 13:30:07.350 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = user.sql.xml, sql key = platform.user.splitPageFrom, sql content =  from pt_user u left join pt_userinfo ui on u.ids = ui.ids left join pt_department d on u.departmentids = d.ids where 1=1 <% if(!isEmpty(userClass)){ %> and u.userClass = #'$userClass$'# <% } %> <% if(!isEmpty(userName)){ %> and u.userName like #'%$userName$%'# <% } %> <% if(!isEmpty(names)){ %> and u.names like #'%$names$%'# <% } %> <% if(!isEmpty(email)){ %> and u.email like #'%$email$%'# <% } %> <% if(!isEmpty(mobile)){ %> and u.mobile like #'%$mobile$%'# <% } %> <% if(!isEmpty(idCard)){ %> and u.idCard like #'%$idCard$%'# <% } %> <% if(!isEmpty(sex)){ %> and ui.sex like #'%$sex$%'# <% } %> <% if(!isEmpty(telephone)){ %> and ui.telephone like #'%$telephone$%'# <% } %> <% if(!isEmpty(qq)){ %> and ui.qq like #'%$qq$%'# <% } %> <% if(!isEmpty(birthday)){ %> <% if(db_type == "mysql"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "postgresql"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "oracle"){ %> and ui.birthday = to_date(#'$birthday$'#, 'YYYY-mm-dd') <% } else if(db_type == "sqlserver"){ %> and ui.birthday = #'$birthday$'# <% } else if(db_type == "db2"){ %> and ui.birthday = #'$birthday$'# <% }%> <% } %> > 
2017-10-10 13:30:07.354 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userInfo.sql.xml, sql key = platform.userInfo.paging, sql content =  <% if(db_type == "mysql" || db_type == "postgresql"){ %> select * from pt_userinfo order by ids asc limit ? offset ? <% } else if(db_type == "oracle"){ %> select * from ( select a.*, rownum rn from (select * from pt_userinfo) a where rownum <= ? ) where rn >= ? <% } else if(db_type == "sqlserver"){ %> select top {0, number, #.#} * from pt_userinfo where ids not in ( select top {1, number, #.#} ids from pt_userinfo ) <% } else if(db_type == "db2"){ %> select * from ( select b.*, rownumber() over() as rn from ( select * from pt_userinfo ) as b ) as a where a.rn < ? and a.rn >= ? <% } %> > 
2017-10-10 13:30:07.359 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserAndGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? and ug.groupids = ? > 
2017-10-10 13:30:07.364 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findGroupIdsByUserIds, sql content =  select ug.groupids from pt_usergroup ug where ug.userids = ? > 
2017-10-10 13:30:07.365 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByUserIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.userids = ? > 
2017-10-10 13:30:07.366 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids = ? > 
2017-10-10 13:30:07.367 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotUserIds, sql content =  select g.* from pt_group g where g.ids not in ( select ug.groupids from pt_usergroup ug where ug.userids = ? ) > 
2017-10-10 13:30:07.368 [] [] [] DEBUG [main] <SqlXmlPlugin.java [323] - parseDoc> <sql加载, sql file = userGroup.sql.xml, sql key = platform.userGroup.findByNotGroupIds, sql content =  select ug.*, u.username, g.ids gid, g.names gname from pt_usergroup ug left join pt_group g on g.ids = ug.groupids left join pt_user u on u.ids = ug.userids where ug.groupids != ? > 
2017-10-10 13:30:07.370 [] [] [] INFO [main] <Run.java [151] - <clinit>> <configPlugin ParamInitPlugin 缓存参数> 
2017-10-10 13:30:07.374 [] [] [] INFO [main] <ParamInitPlugin.java [79] - start> <缓存参数初始化 start ...> 
2017-10-10 13:30:07.375 [] [] [] INFO [main] <ParamInitPlugin.java [113] - platform_cacheUser> <缓存加载：User start> 
2017-10-10 13:30:07.382 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:30:07.974 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_user  
 > 
2017-10-10 13:30:08.025 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:30:08.040 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_user 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:30:08.056 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:30:08.067 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.085 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 13:30:08.089 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 13:30:08.091 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 03a44ba0aa4e4905bea726d4da976ba5 
 > 
2017-10-10 13:30:08.125 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_user` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.126 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 13:30:08.136 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ug.groupids 
    from
        pt_usergroup ug 
    where
        ug.userids = ?  
 > 
2017-10-10 13:30:08.137 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ef15e94a52584743b2b9bf604fccd0cc 
 > 
2017-10-10 13:30:08.142 [] [] [] INFO [main] <ParamInitPlugin.java [139] - platform_cacheUser> <缓存加载：User end> 
2017-10-10 13:30:08.143 [] [] [] INFO [main] <ParamInitPlugin.java [147] - platform_cacheGroupOperator> <缓存加载：Group Operator start> 
2017-10-10 13:30:08.143 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:30:08.162 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_group  
 > 
2017-10-10 13:30:08.164 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:30:08.171 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_group 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:30:08.173 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:30:08.184 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_roleoperator ro 
            on ro.operatorids = o.ids 
    left join
        pt_grouprole gr 
            on gr.roleids = ro.roleids 
    where
        gr.groupids = ?  
 > 
2017-10-10 13:30:08.189 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 13:30:08.210 [] [] [] INFO [main] <ParamInitPlugin.java [173] - platform_cacheGroupOperator> <缓存加载：Group Operator end> 
2017-10-10 13:30:08.210 [] [] [] INFO [main] <ParamInitPlugin.java [181] - platform_cacheStationOperator> <缓存加载：Station Operator start> 
2017-10-10 13:30:08.211 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:30:08.223 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_station  
 > 
2017-10-10 13:30:08.224 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:30:08.228 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_station 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:30:08.229 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:30:08.235 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:30:08.237 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:08.241 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:30:08.242 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0021 
 > 
2017-10-10 13:30:08.246 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:30:08.247 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0022 
 > 
2017-10-10 13:30:08.251 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:30:08.252 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0023 
 > 
2017-10-10 13:30:08.257 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:30:08.258 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0024 
 > 
2017-10-10 13:30:08.264 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:30:08.265 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0025 
 > 
2017-10-10 13:30:08.268 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:30:08.269 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0026 
 > 
2017-10-10 13:30:08.284 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:30:08.285 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0027 
 > 
2017-10-10 13:30:08.288 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        o.ids,
        o.url 
    from
        pt_operator o 
    left join
        pt_stationoperator so 
            on so.operatorids = o.ids 
    where
        so.stationids = ?  
 > 
2017-10-10 13:30:08.289 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0028 
 > 
2017-10-10 13:30:08.292 [] [] [] INFO [main] <ParamInitPlugin.java [207] - platform_cacheStationOperator> <缓存加载：Station Operator end> 
2017-10-10 13:30:08.293 [] [] [] INFO [main] <ParamInitPlugin.java [215] - platform_cacheOperator> <缓存加载：Operator start> 
2017-10-10 13:30:08.293 [] [] [] DEBUG [main] <ToolSqlXml.java [97] - getSqlMy> <beetl解析sql> 
2017-10-10 13:30:08.308 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        count(*)  
    from
        pt_operator  
 > 
2017-10-10 13:30:08.309 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:30:08.312 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_operator 
    order by
        ids asc limit ? offset ?  
 > 
2017-10-10 13:30:08.313 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 2 
 param index: 1   param type: Integer   param value: 10000 
 param index: 2   param type: Long   param value: 0 
 > 
2017-10-10 13:30:08.459 [] [] [] INFO [main] <ParamInitPlugin.java [246] - platform_cacheOperator> <缓存加载：Operator end> 
2017-10-10 13:30:08.459 [] [] [] INFO [main] <ParamInitPlugin.java [254] - platform_cacheDict> <缓存加载：Dict start> 
2017-10-10 13:30:08.461 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_dict  
 > 
2017-10-10 13:30:08.462 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:30:08.466 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.467 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:30:08.473 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.523 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:30:08.526 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.527 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:08.531 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.532 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:08.536 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.537 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:30:08.541 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.542 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:30:08.545 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.546 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:30:08.572 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.573 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:30:08.580 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.581 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 13:30:08.606 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.608 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 18a137a0b92944ba857b5dec39b4fa69 
 > 
2017-10-10 13:30:08.650 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.651 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:30:08.657 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.658 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:30:08.662 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.663 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 13:30:08.666 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.667 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 3082e48992104e3ca8c2f542bbcfbe63 
 > 
2017-10-10 13:30:08.671 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.672 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:30:08.676 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.677 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:30:08.680 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.681 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:30:08.687 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.690 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:30:08.696 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.697 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:08.705 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.712 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:08.716 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.717 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 13:30:08.723 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.724 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 325acbd77f5b43a894ec4ef53ba20914 
 > 
2017-10-10 13:30:08.727 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.728 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:30:08.731 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.732 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:30:08.736 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.737 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 13:30:08.741 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.742 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 405dc683656a4b328de5d5a19d1662d3 
 > 
2017-10-10 13:30:08.745 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.746 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:30:08.749 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.750 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:30:08.757 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.758 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:30:08.762 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.765 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:30:08.769 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.770 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:08.773 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.774 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:08.778 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.779 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:30:08.782 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.783 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:30:08.788 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.789 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:30:08.795 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.796 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:30:08.818 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.818 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:30:08.834 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.835 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:30:08.876 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.876 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:08.899 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.900 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:08.905 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.906 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:30:08.909 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.910 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:30:08.912 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.913 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:08.916 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.917 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:08.922 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.923 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:08.927 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:08.928 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:08.932 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:08.933 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:09.026 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.027 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:09.038 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.039 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:09.046 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.047 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:09.052 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.053 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:30:09.060 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.061 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a1f14efbb8cb4e44a30bd32194d0f24b 
 > 
2017-10-10 13:30:09.065 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.065 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:30:09.070 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.072 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 31b6516f36d44fc280b82affc270c479 
 > 
2017-10-10 13:30:09.077 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.077 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 13:30:09.085 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.086 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: a929cbf789a74107a74aec88c0bcc8fe 
 > 
2017-10-10 13:30:09.093 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.093 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:30:09.098 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.099 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 10c3fc9a884a4cfc91f47e197913fd50 
 > 
2017-10-10 13:30:09.105 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.106 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 13:30:09.110 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.111 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: bf1bf96a123447c58b7f181d3e4e6099 
 > 
2017-10-10 13:30:09.114 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.114 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:30:09.117 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.118 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 56e8bdbc8d77460da17e473ee30906b0 
 > 
2017-10-10 13:30:09.127 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.128 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 13:30:09.134 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.135 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: ddbe84891d8b4632ac0dc2bd36f7f323 
 > 
2017-10-10 13:30:09.138 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_dict` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.139 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:30:09.143 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_dict 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.144 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 64659405a79a4ecb9f116ae84ec55902 
 > 
2017-10-10 13:30:09.147 [] [] [] INFO [main] <ParamInitPlugin.java [261] - platform_cacheDict> <缓存加载：Dict end, size = 17> 
2017-10-10 13:30:09.148 [] [] [] INFO [main] <ParamInitPlugin.java [270] - platform_cacheParam> <缓存加载：Param start> 
2017-10-10 13:30:09.149 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        ids 
    from
        pt_param  
 > 
2017-10-10 13:30:09.150 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param:  empty  
 > 
2017-10-10 13:30:09.154 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.155 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:30:09.162 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.163 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 0c78f87750a745bbb59005a6ca0f744a 
 > 
2017-10-10 13:30:09.171 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.172 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:09.175 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.177 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:09.189 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.190 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:30:09.193 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.194 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 7381008292054bccba20224bc33774d7 
 > 
2017-10-10 13:30:09.196 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.197 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:09.201 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.203 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:09.207 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.207 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:30:09.210 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.211 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8094c60d7a594b36bb0187cbce9c4188 
 > 
2017-10-10 13:30:09.214 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.214 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:09.217 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.218 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:09.222 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.223 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:09.226 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.227 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 83f4b0ee56904cbeb5f91696ad804c29 
 > 
2017-10-10 13:30:09.231 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.232 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:09.235 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.236 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:09.239 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        `pt_param` 
    where
        `ids` = ? 
 > 
2017-10-10 13:30:09.239 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:09.253 [] [] [] INFO [main] <SqlReporter.java [59] - invoke> <
 Sql: 
 
    select
        * 
    from
        pt_param 
    where
        parentids = ? 
        and status = '1' 
    order by
        orderids asc  
 > 
2017-10-10 13:30:09.254 [] [] [] INFO [main] <Dialect.java [139] - fillStatement> <
 Sql param: 1 
 param index: 1   param type: String   param value: 8a40c0353fa828a6013fa898d4ac0020 
 > 
2017-10-10 13:30:09.258 [] [] [] INFO [main] <ParamInitPlugin.java [277] - platform_cacheParam> <缓存加载：Param end, size = 5> 
2017-10-10 13:30:09.258 [] [] [] INFO [main] <ParamInitPlugin.java [99] - start> <缓存参数初始化 end ...> 
2017-10-10 13:30:09.259 [] [] [] INFO [main] <Run.java [154] - <clinit>> <configPlugin FileRenamePlugin 配置文件上传命名策略插件> 
2017-10-10 13:30:09.285 [] [] [] INFO [main] <Run.java [157] - <clinit>> <configPlugin QuartzPlugin 配置Quartz插件> 
2017-10-10 13:30:09.598 [] [] [] INFO [main] <? [?] - ?> <using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter> 
2017-10-10 13:30:10.045 [] [] [] INFO [main] <Main.java [58] - main> < [DUBBO] Use container type([spring]) to run dubbo serivce., dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:14.779 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:15.221 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:15.497 [] [] [] INFO [main] <ServiceBean.java [108] - onApplicationEvent> < [DUBBO] The service ready on spring started. service: com.ludateam.wechat.api.MessageService, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.229 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.251 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.272 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.295 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.295 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613415573, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.296 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.MessageService url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613415573 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=21072&registry=zookeeper&timestamp=1507613415550, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.307 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.331 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.377 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.452 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.468 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.895 [] [] [] INFO [main] <AbstractServer.java [70] - <init>> < [DUBBO] Start NettyServer bind /0.0.0.0:20990, export /169.254.148.248:20990, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.905 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:16.929 [] [] [] INFO [main] <AbstractRegistry.java [232] - loadProperties> < [DUBBO] Load registry store file C:\Users\lenovo\.dubbo\dubbo-registry-127.0.0.1.cache, data: {com.ludateam.wechat.api.UserService=empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=configurators&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949 empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=routers&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949 empty://169.254.148.248/com.ludateam.wechat.api.UserService?application=wechat.consumer&category=providers&dubbo=2.8.4&getUserByName.actives=10&getUserByPhone.retries=2&getUserByPhone.timeout=5000&interface=com.ludateam.wechat.api.UserService&methods=getUserByName,getUserByPhone&owner=ludateam&pid=49632&protocol=dubbo&revision=1.0.0&side=consumer&timestamp=1504764633949, com.alibaba.dubbo.demo.user.facade.AnotherUserRestService=empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=configurators&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722 empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=routers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722 empty://169.254.148.248/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?application=demo-consumer&category=providers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787171722, annotationConfig/net.aimeizi.student.StudentRestService=empty://169.254.148.248:20880/net.aimeizi.student.StudentRestService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&group=annotationConfig&interface=net.aimeizi.student.StudentRestService&iothreads=10&methods=registerStudent,getStudent&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&side=provider&threads=500&timestamp=1502851536396&validation=true, net.aimeizi.student.StudentRestService=empty://169.254.148.248:8000/services/net.aimeizi.student.StudentRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.student.StudentRestService&methods=registerStudent,getStudent&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&side=provider&threads=500&timestamp=1502851539792&validation=true, com.ludateam.wechat.api.MessageService=empty://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=29524&serialization=kryo&server=tomcat&side=provider&timestamp=1507613192958, com.ludateam.wechat.api.CallService=empty://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=29524&serialization=kryo&side=provider&timestamp=1507613198923, com.alibaba.dubbo.monitor.MonitorService=empty://169.254.56.102:7070/com.alibaba.dubbo.monitor.MonitorService?anyhost=true&application=simple-monitor&category=configurators&check=false&delay=-1&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.monitor.MonitorService&methods=lookup,collect&pid=27800&side=provider&timestamp=1461831883967, */com.alibaba.dubbo.demo.bid.BidService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.bid.BidService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.bid.BidService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.bid.BidService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.bid.BidService&version=*, com.alibaba.dubbo.demo.user.facade.UserRestService=empty://169.254.148.248:8888/services/com.alibaba.dubbo.demo.user.facade.UserRestService?accepts=500&anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&extension=com.alibaba.dubbo.demo.extension.TraceInterceptor,                     com.alibaba.dubbo.demo.extension.TraceFilter,                     com.alibaba.dubbo.demo.extension.ClientTraceFilter,                     com.alibaba.dubbo.demo.extension.DynamicTraceBinding,                     com.alibaba.dubbo.demo.extension.CustomExceptionMapper,                     com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter&generic=false&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&methods=getUser,registerUser&organization=dubbox&owner=programmer&pid=12408&server=tomcat&side=provider&threads=500&timestamp=1502787141475&validation=true, net.aimeizi.order.OrderService$Iface=empty://169.254.148.248:33201/net.aimeizi.order.OrderService$Iface?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.order.OrderService$Iface&methods=ping,getOrder&organization=dubbo&owner=aimeizi&pid=38176&service.filter=serviceFilter&side=provider&timeout=10000&timestamp=1502851538967, */com.alibaba.dubbo.monitor.MonitorService:*=empty://169.254.56.102/com.alibaba.dubbo.monitor.MonitorService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.monitor.MonitorService&version=* dubbo://169.254.56.102:7070/com.alibaba.dubbo.monitor.MonitorService?anyhost=true&application=simple-monitor&delay=-1&dubbo=2.0.0&generic=false&interface=com.alibaba.dubbo.monitor.MonitorService&methods=lookup,collect&pid=27800&side=provider&timestamp=1461831883967, com.alibaba.dubbo.demo.bid.BidService=empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=configurators&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666 empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=routers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666 empty://169.254.148.248/com.alibaba.dubbo.demo.bid.BidService?application=demo-consumer&category=providers&dubbo=2.0.0&interface=com.alibaba.dubbo.demo.bid.BidService&methods=throwNPE,bid&organization=dubbox&owner=programmer&pid=22084&side=consumer&timestamp=1502787169666, annotationConfig/com.alibaba.dubbo.demo.user.facade.UserRestService=empty://169.254.148.248:20880/com.alibaba.dubbo.demo.user.facade.UserRestService?anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&generic=false&group=annotationConfig&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&methods=getUser,registerUser&optimizer=com.alibaba.dubbo.demo.SerializationOptimizerImpl&organization=dubbox&owner=programmer&pid=12408&serialization=kryo&side=provider&timestamp=1502787139393&validation=true, net.aimeizi.user.UserService=empty://169.254.148.248:20880/net.aimeizi.user.UserService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.user.UserService&iothreads=10&methods=getUserById,updatePassword,ping,registerUser,deleteUserById&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&service.filter=serviceFilter&side=provider&threads=500&timeout=10000&timestamp=1502851538055, xmlConfig/com.alibaba.dubbo.demo.user.UserService=empty://169.254.148.248:20880/com.alibaba.dubbo.demo.user.UserService?anyhost=true&application=demo-provider&category=configurators&check=false&dubbo=2.0.0&generic=false&group=xmlConfig&interface=com.alibaba.dubbo.demo.user.UserService&methods=getUser,registerUser&optimizer=com.alibaba.dubbo.demo.SerializationOptimizerImpl&organization=dubbox&owner=programmer&pid=12408&serialization=kryo&side=provider&timestamp=1502787140960, net.aimeizi.student.AnotherStudentRestService=empty://169.254.148.248:8000/services/net.aimeizi.student.AnotherStudentRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&connections=100&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.student.AnotherStudentRestService&methods=registerStudent,getStudent&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&side=provider&threads=500&timeout=2000&timestamp=1502851540247&validation=true, */com.alibaba.dubbo.demo.user.facade.AnotherUserRestService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.AnotherUserRestService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.AnotherUserRestService&version=*, com.yingjun.dubbox.api.UserService=empty://169.254.148.248:9009/com.yingjun.dubbox.api.UserService?anyhost=true&application=provider&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=5000&dubbo=2.8.4&extension=com.yingjun.dubbox.services.ControllFilter&generic=false&interface=com.yingjun.dubbox.api.UserService&methods=getUserByName,getUserByPhone&owner=yingjun&pid=9444&revision=1.0.0&serialization=kryo&server=tomcat&side=provider&timestamp=1502937435746, */com.alibaba.dubbo.demo.user.facade.UserRestService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.UserRestService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.facade.UserRestService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.facade.UserRestService&version=*, */com.alibaba.dubbo.demo.user.UserService:*=empty://169.254.56.102/com.alibaba.dubbo.demo.user.UserService?category=consumers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.UserService&version=* empty://169.254.56.102/com.alibaba.dubbo.demo.user.UserService?category=providers&check=false&classifier=*&group=*&interface=com.alibaba.dubbo.demo.user.UserService&version=*, xmlConfig/net.aimeizi.student.StudentService=empty://169.254.148.248:20880/net.aimeizi.student.StudentService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&group=xmlConfig&interface=net.aimeizi.student.StudentService&iothreads=10&methods=registerStudent,getStudent&optimizer=net.aimeizi.SerializationOptimizerImpl&organization=dubbo&owner=aimeizi&pid=38176&serialization=kryo&server=netty&side=provider&threads=500&timestamp=1502851539409, net.aimeizi.person.PersonService=empty://169.254.148.248:40001/net.aimeizi.person.PersonService?anyhost=true&application=dubbo-provider&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=net.aimeizi.person.PersonService&methods=ping,getPersonList&organization=dubbo&owner=aimeizi&pid=38176&service.filter=serviceFilter&side=provider&timeout=10000&timestamp=1502851537384, net.aimeizi.user.UserRestService=empty://169.254.148.248:8000/services/net.aimeizi.user.UserRestService?accepts=500&anyhost=true&application=dubbo-provider&category=configurators&check=false&connections=100&dubbo=2.8.4&extension=com.alibaba.dubbo.rpc.protocol.rest.support.LoggingFilter,net.aimeizi.exception.ValidationExceptionMapper&generic=false&interface=net.aimeizi.user.UserRestService&methods=getUserById,updatePassword,post,ping,get,registerUser,deleteUserById&organization=dubbo&owner=aimeizi&pid=38176&server=tomcat&service.filter=serviceFilter&side=provider&threads=500&timeout=10000&timestamp=1502851538560&validation=true}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:17.277 [] [] [] INFO [main] <AbstractRegistry.java [302] - register> < [DUBBO] Register: dubbo://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613415573, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:18.206 [] [] [] INFO [main] <AbstractRegistry.java [325] - subscribe> < [DUBBO] Subscribe: provider://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613415573, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:18.834 [] [] [] INFO [main] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613415573, urls: [empty://169.254.148.248:20990/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613415573], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:18.848 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:18.860 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:18.891 [] [] [] DEBUG [main] <ExtensionLoader.java [943] - createAdaptiveExtensionClassCode> < [DUBBO] package com.alibaba.dubbo.remoting.http;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class HttpBinder$Adpative implements com.alibaba.dubbo.remoting.http.HttpBinder {
public com.alibaba.dubbo.remoting.http.HttpServer bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.http.HttpHandler arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", "jetty");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.http.HttpBinder) name from url(" + url.toString() + ") use keys([server])");
com.alibaba.dubbo.remoting.http.HttpBinder extension = (com.alibaba.dubbo.remoting.http.HttpBinder)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.http.HttpBinder.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:18.905 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:18.905 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.MessageService to url rest://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613418903, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:18.906 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.MessageService url rest://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613418903 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=21072&registry=zookeeper&timestamp=1507613415550, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:23.124 [] [] [] INFO [main] <AbstractRegistry.java [302] - register> < [DUBBO] Register: rest://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613418903, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:23.558 [] [] [] INFO [main] <AbstractRegistry.java [325] - subscribe> < [DUBBO] Subscribe: provider://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613418903, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.013 [] [] [] INFO [main] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613418903, urls: [empty://169.254.148.248:9009/com.ludateam.wechat.api.MessageService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.MessageService&methods=receiveMessage,sendTextMessage&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613418903], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.014 [] [] [] INFO [main] <ServiceBean.java [108] - onApplicationEvent> < [DUBBO] The service ready on spring started. service: com.ludateam.wechat.api.CallService, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.045 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.CallService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.045 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.CallService to url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613424023, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.045 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.CallService url dubbo://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613424023 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=21072&registry=zookeeper&timestamp=1507613424020, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.049 [] [] [] INFO [main] <AbstractRegistry.java [302] - register> < [DUBBO] Register: dubbo://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613424023, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.477 [] [] [] INFO [main] <AbstractRegistry.java [325] - subscribe> < [DUBBO] Subscribe: provider://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613424023, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.971 [] [] [] INFO [main] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613424023, urls: [empty://169.254.148.248:20990/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&side=provider&timestamp=1507613424023], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.977 [] [] [] INFO [main] <ServiceConfig.java [518] - exportLocal> < [DUBBO] Export dubbo service com.ludateam.wechat.api.CallService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.977 [] [] [] INFO [main] <ServiceConfig.java [474] - doExportUrlsFor1Protocol> < [DUBBO] Export dubbo service com.ludateam.wechat.api.CallService to url rest://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613424973, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.978 [] [] [] INFO [main] <ServiceConfig.java [485] - doExportUrlsFor1Protocol> < [DUBBO] Register dubbo service com.ludateam.wechat.api.CallService url rest://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613424973 to registry registry://127.0.0.1:2181/com.alibaba.dubbo.registry.RegistryService?application=wechat.services&dubbo=2.8.4&owner=ludateam&pid=21072&registry=zookeeper&timestamp=1507613424020, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:24.987 [] [] [] INFO [main] <AbstractRegistry.java [302] - register> < [DUBBO] Register: rest://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613424973, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:25.557 [] [] [] INFO [main] <AbstractRegistry.java [325] - subscribe> < [DUBBO] Subscribe: provider://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613424973, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:25.959 [] [] [] INFO [main] <AbstractRegistry.java [422] - notify> < [DUBBO] Notify urls for subscribe url provider://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613424973, urls: [empty://169.254.148.248:9009/com.ludateam.wechat.api.CallService?anyhost=true&application=wechat.services&category=configurators&check=false&default.accepts=1000&default.threadpool=fixed&default.threads=100&default.timeout=50000&dubbo=2.8.4&extension=com.ludateam.wechat.filter.ControllFilter&generic=false&interface=com.ludateam.wechat.api.CallService&methods=callService&owner=ludateam&pid=21072&serialization=kryo&server=tomcat&side=provider&timestamp=1507613424973], dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 13:30:25.995 [] [] [] INFO [main] <Main.java [81] - main> < [DUBBO] Dubbo SpringContainer started!, dubbo version: 2.8.4, current host: 127.0.0.1> 
2017-10-10 14:22:49.686 [] [] [] INFO [http-nio-9009-exec-1] <PropertyUtil.java [37] - loadProps> <开始加载properties文件内容.......> 
2017-10-10 14:22:49.713 [] [] [] INFO [http-nio-9009-exec-1] <PropertyUtil.java [57] - loadProps> <加载properties文件内容完成...........> 
2017-10-10 14:22:49.718 [] [] [] INFO [http-nio-9009-exec-1] <PropertyUtil.java [58] - loadProps> <properties文件内容：{dubbo.registry.address=zookeeper://127.0.0.1:2181, xh.wbh=http://172.16.1.51/qywx, xh.nbh=http://172.16.1.50/qywx , web.url=http://127.0.0.1:8899}> 
2017-10-10 14:22:49.723 [] [] [] INFO [http-nio-9009-exec-1] <MessageServiceImpl.java [62] - sendTextMessage> <post {
} to http://127.0.0.1:8899/wechat/qyapi/sendTextMessage> 
